25th October 2004
-----------------

Generating synteny blocks from whole genome alignments
======================================================

Needs whole genome alignments stored in an ensembl compara database or a set of gff files, one per chromosome


Configuration
-------------

ensembl, ensembl-compara and bioperl-live modules will be needed
Make sure, you've update your PERL5LIB variable to point to the modules 

in tcsh
setenv BASEDIR /some/path/to/modules
setenv PERL5LIB ${BASEDIR}/bioperl-live:${BASEDIR}/ensembl/modules:${BASEDIR}/ensembl-compara/modules

in bash
BASEDIR=/some/path/to/modules
export BASEDIR
PERL5LIB=${BASEDIR}/bioperl-live:${BASEDIR}/ensembl/modules:${BASEDIR}/ensembl-compara/modules
export PERL5LIB


Database needed
---------------

The compara from which you will get the whole genome alignment data
You will need to set up a Bio::EnsEMBL::Registry configuration file, that will hold all necessary information 
to connect the compara database. See an example in ensembl/modules/Bio/EnsEMBL/Utils/ensembl_init.example 
and read the Bio::EnsEMBL::Registry perldoc


Dumping whole genome alignments to build syntenies
--------------------------------------------------

Use the script ensembl-compara/scripts/synteny/DumpGFFAlignmentsForSynteny.pl

It dumps whole genome alignments in gff format for a given chromosome.

cd /ecs2/work4/compara_abel_cara/ensembl_release_26/compara/synteny/Hs35Mm33

echo "select distinct(name) from dnafrag where genome_db_id=1 and coord_system_name=\"Chromosome\";"|mysql -h ecs2 -u ensro -P3362 -N abel_ensembl_compara_26_1 |grep -v NT | grep -v DR | sort > Hs35_chr_names

cat Hs35_chr_names |while read i;do bsub -o $i.err ~/src/ensembl_main/ensembl-compara/scripts/synteny/DumpGFFAlignmentsForSynteny.pl --dbname compara25 --qy human --tg mouse --seq_region $i;done

In this command line, "human", "mouse" and "abelcompara26" are aliases to the respective core and compara databases, 
as defined in the registry configuration file.

This will write out all the dna-dna matches for mouse chromosomes against rat into files called

	1.syten.gff
	2.syten.gff
	etc...

Building the synteny regions
----------------------------

Make sure you have either your JAVA_HOME variable set

JAVA_HOME=/usr/opt/java141
export JAVA_HOME

or that the java executable is in your PATH

PATH=/usr/opt/java141/bin/:$PATH

Now build the synteny regions for each chromosome.

ls *.syten.gff|sed "s/\.syten\.gff//"|while read i;do java -classpath ~/src/ensembl_main/ensembl-compara/scripts/synteny/BuildSynteny.jar BuildSynteny $i.syten.gff 100000 100000 false > $i.100000.100000.BuildSynteny.out 2> $i.100000.100000.BuildSynteny.err;done

NOTE: the last parameter "false" is only needed for human/mouse, human/rat and mouse/rat NOT for 
elegans/briggsae (it can be ommitted). Don't ask me (Abel) what that does, Steve Searle included this 
argument to make it work over mammals and worms.

cat *.BuildSynteny.out|grep cluster > Hs35Mm33.100000.100000.BuildSynteny

Loading the data in compara db
------------------------------

ensembl-compara/scripts/synteny/LoadSyntenyData.pl --dbname abelcompara26 --qy human --tg mouse Hs35Mm33.100000.100000.BuildSynteny


Compiling BuildSynteny.java
===========================

NOTE: not important for production, it is just to know how to create the BuildSynteny.jar file from
BuildSynteny.java

BuildSynteny.java has still dependancies on apollo code, basically those

import apollo.datamodel.*; //for FeatureSet and FeatureSetI
import apollo.seq.io.*; //for GFFFile
import apollo.util.*; //for QuickSort

Better to do all the following on a PC linux box, either yours or one of the rlx blades. That because
apollo does not compile properly on alpha, Don't ask me why...I've used j2sdk1.4.1_02 from sun.

1- get the apollo source code

 http://gmod.sourceforge.net/cvs.shtml

2- compile apollo.

 See the README

3- Compile BuildSynteny.java

 if your apollo classfiles directory is ~/src/apollo/src/java/classfiles/, then

 javac -classpath ~/src/apollo/src/java/classfiles/ BuildSynteny.java

4- Create the first part of BuildSynteny.jar

 jar cvf BuildSynteny.jar -C ~/src/apollo/src/java/classfiles/ apollo

5- Then integrate BuildSynteny.class in it

 jar uvf BuildSynteny.jar BuildSynteny.class

And that should be all :)