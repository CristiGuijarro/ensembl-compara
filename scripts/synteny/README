19th August 2002
----------------

Generating synteny blocks from raw dna-dna matches
--------------------------------------------------

Need dna-dna matches stored in an ensembl compara database or a set of gff files, one per chromosome


2. Configuration
-----------------


2.1 Code needed : 

core, trace and compara core modules

  cvs co -r branch-ensembl-25 ensembl ensembl-compara

bioperl ensembl modules

  cvs -d :ext:bio.perl.org:/home/repository/bioperl co -r ?Tag? bioperl-live

works with branch-07, but should also work with branch-1-2, need a try.

2.2 Set up the perl environment :

  cd ensembl-compara/scripts/synteny
  setenv BASEDIR /some/path/to modules
  setenv PERL5LIB ${BASEDIR}/bioperl-0.7:${BASEDIR}/ensembl/modules:${BASEDIR}/ensembl-compara/modules:${BASEDIR}/ensembl-trace/modules


2.3 Databases needed

  2.3.1 Compara database

    You will need the hostname, database name, username and password to the relevant compara database

  2.3.2 Core database

    You will need the above information for the core database as well as the name of the static golden path.
    This database is used to fetch the names and the lengths of the chromosomes.

    You will need to set up a Bio::EnsEMBL::Registry configuration file, that will hold all necessary information 
    to connect any needed core or compara database. See an example in ensembl/modules/Bio/EnsEMBL/Utils/ensembl_init.example 
    and read the Bio::EnsEMBL::Registry perldoc


3. Dumping the raw dna-dna matches
----------------------------------

  3.1. The dumping script


ensembl-compara/scripts/synteny/dumpsynteny

This dumps out dna-dna in gff format one chromosome at a time and the format of the command is

echo "select distinct(name) from dnafrag where genome_db_id=2 and coord_system_name=\"Chromosome\";"|mysql -h ecs2 -u ensro -P3362 -N ensembl_compara_25_1 |grep -v NT | sort > Mm33_chr_names

cat Mm33_chr_names |while read i;do bsub -o $i.err ~/src/ensembl_main/ensembl-compara/scripts/synteny/dumpsynteny --dbname compara25 --qy mouse --tg rat --seq_region $i;done

In this command line, "mouse", "rat" and "compara25" are aliases to the respective core and compara databases, 
as defined in the registry configuration file.

This will write out all the dna-dna matches for mouse chromosomes against rat into files called

	1.syten.gff
	2.syten.gff
	etc...


4.0 Making synteny blocks

  4.1  Setting the environment

  For the forseeable future this will be done using the apollo code so your path will need to be set to include a JVM.  On the alphas use the following

  PATH=/usr/opt/java131/bin/:$PATH

  4.2 Running over all chromosomes

ls *.syten.gff|sed "s/\.syten\.gff//"|while read i;do java -classpath ~/src/ensembl_main/ensembl-compara/scripts/synteny/BuildSynteny.jar BuildSynteny $i.syten.gff 100000 100000 false > $i.100000.100000.BuildSynteny.out 2> $i.100000.100000.BuildSynteny.err;done

NOTE: the last parameter "false" is only needed for human/mouse, human/rat and mouse/rat NOT for 
elegans/briggsae (it can be ommitted). Don't ask me (Abel) what that does, Steve Searle included this 
argument to make it work over mammals and worms.

cat *.BuildSynteny.out|grep cluster > Mm33Rn3.100000.100000.BuildSynteny

5- Load in compara db

ensembl-compara/scripts/synteny/LoadComparaDb.pl --dbname compara25 --qy mouse --tg rat Mm33Rn3.100000.100000.BuildSynteny


NOTE: not important for production, it is just to know how to create the BuildSynteny.jar file from
BuildSynteny.java

BuildSynteny.java has still dependancies on apollo code, basically those

import apollo.datamodel.*; //for FeatureSet and FeatureSetI
import apollo.seq.io.*; //for GFFFile
import apollo.util.*; //for QuickSort

Better to do all the following on a PC linux box, either yours or one of the rlx blades. That because
apollo does not compile properly on alpha, Don't ask me why...I've used j2sdk1.4.1_02 from sun.

1- get the apollo source code

 http://gmod.sourceforge.net/cvs.shtml

2- compile apollo.

 See the README

3- Compile BuildSynteny.java

 if your apollo classfiles directory is ~/src/apollo/src/java/classfiles/, then

 javac -classpath ~/src/apollo/src/java/classfiles/ BuildSynteny.java

4- Create the first part of BuildSynteny.jar

 jar cvf BuildSynteny.jar -C ~/src/apollo/src/java/classfiles/ apollo

5- Then integrate BuildSynteny.class in it

 jar uvf BuildSynteny.jar BuildSynteny.class

And that should be all :)