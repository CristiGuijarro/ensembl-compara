How to make gene pairs from 2 genomes
-------------------------------------

0. Overview
   --------

 - Peptide sets are dumped for each genome and blast is used to compare one set to the other.

 - Best reciprocal hits are first labelled as orthologues.  

 - An attempt is then made to pair all the unpaired proteins based on their genomic location.


1. Requirements
   ------------

2 core ensembl databases complete with genes and stable_ids, one for each genome

Blast and the formatting tools.


2. Code needed and environment setup
   ---------------------------------

  2.1 Code checkout

    core ensembl code

      cvs -d :ext:cvs.sanger.ac.uk:/nfs/ensembl/cvsroot co -r branch-ensembl-19 ensembl
    
    ensembl-pipeline code (for blasts)

      cvs -d :ext:cvs.sanger.ac.uk:/nfs/ensembl/cvsroot co -r branch-ensembl-15 ensembl-pipeline

    gene_pair code

      cvs -d :ext:cvs.sanger.ac.uk:/nfs/ensembl/cvsroot co ensembl-genepair

    bioperl code

      cvs -d :ext:bio.perl.org:/home/repository/bioperl co -r branch-07  bioperl-live

in tcsh
    setenv BASEDIR   /some/path/to/modules
    setenv PERL5LIB  ${BASEDIR}/ensembl/modules:${BASEDIR}/ensembl-pipeline/modules:${BASEDIR}/ensembl-genepair/modules:${BASEDIR}/bioperl-live

in bash
    BASEDIR=/some/path/to/modules
    PERL5LIB=${BASEDIR}/ensembl/modules:${BASEDIR}/ensembl-pipeline/modules:${BASEDIR}/ensembl-genepair/modules:${BASEDIR}/bioperl-live

3. Dump the peptides
--------------------

 WORKDIR=/ecs2/work4/compara_abel_cara/genepair
 mkdir -p $WORKDIR/FastaPeptidesFiles
 cd $WORKDIR/FastaPeptidesFiles

This needs to be done for both genomes

dump_Genes -host ecs2e.internal.sanger.ac.uk -dbname rattus_norvegicus_core_20_3b -file rattus_norvegicus_core_20_3b.fasta > rattus_norvegicus_core_20_3b.fasta.err 2>&1 
dump_Genes -host ecs2d.internal.sanger.ac.uk -dbname mus_musculus_core_20_32 -file mus_musculus_core_20_32.fasta > mus_musculus_core_20_32.fasta.err 2>&1 

add the option -prefix MYPREFIX, for species having external gene build, i.e drosophila, elegans.
For example I use to use -prefix ENSCELT and -prefix ENSDRMT for elegans and drosophila respectively.

This produces 2 fasta files with the transcript and gene stable ids in the header along with the chromosome name and coordinates

3a. Pipeline configuration
    ----------------------

From the example file, 

ensembl-pipeline/modules/Bio/EnsEMBL/Pipeline/Config/Blast.pm.example
ensembl-pipeline/modules/Bio/EnsEMBL/Pipeline/Config/General.pm.example (we don't really need this file as
we don't use properly the ensembl-pipeline as it should be through the RuleManager


create the needed file, e.g.

cp ensembl-pipeline/modules/Bio/EnsEMBL/Pipeline/Config/Blast.pm.example ensembl-pipeline/modules/Bio/EnsEMBL/Pipeline/Config/Blast.pm

The only one you should have to edit is Config/Blast.pm for regular expressions for both the mouse and human databases, set the default blast to wublast
e.g
        { 
            name    => '/ecs2/work3/abel/genepair/FastaPeptidesFiles/mus_musculus_core_20_32.fasta',
            type    => 'protein',
            header  => '^(\S+)\s*',
	    flavour => 'wu'
        }


4. Initialize the mysql genepair database
   --------------------------------------

Create a new pair database

   echo "create database genepairs_Mm32Rn3b_20_1" | mysql -u ensadmin -pxxxxx -h ecs1c

Load up the sql

  mysql -u ensadmin -pxxxxx -h ecs1c genepairs_Mm32Rn3b_20_1 < ensembl-genepair/sql/gene_pair.sql

Populate the protein table (Length and position information for all the peptides)

Need to run twice - once for each peptide file

  fasta2sql -host ecs1c -user ensadmin -p xxxx -dbname genepairs_Mm32Rn3b_20_1 mus_musculus_core_20_32.fasta 
  fasta2sql -host ecs1c -user ensadmin -p xxxx -dbname genepairs_Mm32Rn3b_20_1 rattus_norvegicus_core_20_3b.fasta

This command will fill the peptide table into the database. Make sure you have the expected number of entries 
in it (e.g. select count(*) from peptide where id like "ENSMUSP%"; should give the same number as the number
of sequences in your FASTA file)

5. Run the blasts using jobs array
   ------------------------------
Create a working directory where the blast job configuration can be created and job status and error 
output can be generated.

mkdir -p $WORKDIR/20Mm32Rn3b
cd $WORKDIR/20Mm32Rn3b

create job configuration file by copying sample and editing it's values

cp $BASEDIR/ensembl-genepair/scripts/gpblastpair.sample.config ./config

Contents of config file for this example:
gp_host:         ecs1c
gp_dbname:       genepairs_Mn32Rn3b_20_1
lsf_jobname:     Mm32Rn3b
pepFasta1:       /ecs2/work4/compara_abel_cara/genepair/FastaPeptidesFiles/mus_musculus_core_20_32.fasta
pepFasta2:       /ecs2/work4/compara_abel_cara/genepair/FastaPeptidesFiles/rattus_norvegicus_core_20_3b.fasta

Run gpblastpair.pl script in the directory with the config file

$BASEDIR/ensembl-genepair/scripts/gpblastpair.pl

This gpblastpair.pl script will prepare the fasta files for use as blast databases. It will create 
two subdirectories within the working directory, one for each species blasted against the other.  
Within each directory the script will create a series of jobs files.  These are configuration 
parameters for the LaunchBlast.pl script.  The genepair.pl script will then use bsub to launch 
these jobs by submitting as a job array.

The blasts will be run twice - 
 once for mouse querying rat and 
 once for rat querying mouse.
This does duplicate results but they run so fast this is not worth worrying about.

Usually these take about 20 minutes. There may be failures that need to be rerun -
be careful of running out of disk space.

To check how many jobs went wrong use this command

ls *.out|while read i;do echo -n $i" ";awk '/^Subject/ && $NF=="Done" {print $NF;exit} /^Subject/ && $NF!="Done" {printf $NF" "} /^Job was executed/ {print;exit}' $i;done|awk '{print $2}'|sort |uniq -c

7. Almost done - making the pairs
   ------------------------------

mkdir -p $WORKDIR/20Mm32Rn3b/pairs
cd $WORKDIR/20Mm32Rn3b/pairs

There is a script for making the pairs, which needs to be run on each chromosome for each species
 one for pairing rat with mouse and 
 one for pairing mouse with rat.

i.e. for mouse,

echo "select distinct(chr) from peptide where id like \"ENSMUSP%\";"|mysql -h ecs1c -u ensro genepairs_Mm32Rn3b_20_1 | awk '!/chr/' > Mm32_chr_names

cat Mm32_chr_names | while read i; do bsub -o Mm32.$i.out -e Mm32.$i.err ~/src/ensembl_main/ensembl-genepair/scripts/build_pairs.pl -host ecs1c -dbname genepairs_Mm32Rn3b_20_1 -chr $i -qyprefix ENSMUSP ; done

i.e. for rat,

echo "select distinct(chr) from peptide where id like \"ENSRNOP%\";"|mysql -h ecs1c -u ensro genepairs_Mm32Rn3b_20_1 | awk '!/chr/' > Rn3b_chr_names

cat Rn3b_chr_names | while read i; do bsub -o Rn3b.$i.out -e Rn3b.$i.err ~/src/ensembl_main/ensembl-genepair/scripts/build_pairs.pl -host ecs1c -dbname genepairs_Mm32Rn3b_20_1 -chr $i -qyprefix ENSRNOP -reverse_output; done

9. Generating output files and stats
   ---------------------------------

The two pair sets need to be combined and any duplicates removed

ls| grep out |xargs cat| grep -e ORPHAN -e SEED -e PIP -e CUCKOO |sort -u > ../Mm32Rn3b.build_pairs


10. inserting in compara db
    -----------------------
cd ..

WARNING: right now the loading is quite low speed (using the core api to get chromosomal coordinates 
for genes and peptides). The other thing is that the compara storing methods are not robust enough 
to recover if something goes wrong. Basically, when you try to load HumanMouse homologues and 
HumanRat homologues at the same time, it may happen that the same human gene or peptide are being 
stored at the same time, and one of the 2 process can break. Basically the solution is to store 
no-overlapping-species homologues, e.g. you can store ElegansBriggsae, DrosoAno, HumanMouse and DanioFugu
ate the same time. Then sequentially the other taking care that you don't store with 2 different process 
data on the same species
Need definitely to be improved!!!

For this part make sure you use the main trunk code of ensembl and ensembl-compara (that 
will become soon branch-ensembl-20) setting your PERL5LIB correctly.

    core ensembl code

      cvs -d :ext:cvs.sanger.ac.uk:/nfs/ensembl/cvsroot co ensembl

    compara ensembl code

      cvs -d :ext:cvs.sanger.ac.uk:/nfs/ensembl/cvsroot co ensembl-compara

~/src/ensembl_main/ensembl-genepair/scripts/LoadComparaDb.pl -host ecs2d -dbuser ecs2dadmin -dbpass xxxx -dbname ensembl_compara_13_1 -conf_file /ecs2/work4/compara_abel_cara/genepair/Compara.conf -genome_db_id1 2 -genome_db_id2 3 Mm32Rn3b.build_pairs > Mm32Rn3b.pairs.dbloaderr 2>&1 

In case of elegans and drosophila, you have to take care of the prefix that have been added when dumping
the peptide sequences. Now they have to be deleted before loading. This can be done using the option -prefix1
or -prefix2. That will delete the given prefix from the transcript_stable_ids. 

11. calculate dN and dS values
    --------------------------

Once each homology relationship is loaded to the compara database and only then we can calculate the
dN and dS value.
So far we only do that for human/mouse, human/rat, mouse/rat and elegans/briggsae.

We do that for all of them at once. So have all the paired species homologies loaded in compara.


 mkdir -p $WORKDIR/dNdS_20_1/homology_ids_dNdS $WORKDIR/dNdS_20_1/homology_ids_in \
 $WORKDIR/dNdS_20_1/homology_ids_out
 cd $WORKDIR/dNdS_20_1

Get all the homology_ids for which as dN, dS calculation is required
e.g. for human/mouse, taxon_id 9606 and 10090 repectively

echo "select hm1.homology_id from homology_member hm1,homology_member hm2,member m1,member m2 where hm1.homology_id=hm2.homology_id and hm1.member_id=m1.member_id and hm2.member_id=m2.member_id and m1.taxon_id=9606 and m2.taxon_id=10090;"|grep -v homology_id > 9606_10090.homology_ids

an so on for 9606/10116, 10090/10116 and 6239/6238

echo "select hm1.homology_id from homology_member hm1,homology_member hm2,member m1,member m2 where hm1.homology_id=hm2.homology_id and hm1.member_id=m1.member_id and hm2.member_id=m2.member_id and m1.taxon_id=9606 and m2.taxon_id=10116;"|grep -v homology_id > 9606_10116.homology_ids

echo "select hm1.homology_id from homology_member hm1,homology_member hm2,member m1,member m2 where hm1.homology_id=hm2.homology_id and hm1.member_id=m1.member_id and hm2.member_id=m2.member_id and m1.taxon_id=10090 and m2.taxon_id=10116;"|grep -v homology_id > 10090_10116.homology_ids

echo "select hm1.homology_id from homology_member hm1,homology_member hm2,member m1,member m2 where hm1.homology_id=hm2.homology_id and hm1.member_id=m1.member_id and hm2.member_id=m2.member_id and m1.taxon_id=6239 and m2.taxon_id=6238;"|grep -v homology_id > 6239_6238.homology_ids


To calculate the dN, dS we use ensembl-compara/scripts/homology/generate_dN_dS.pl. The script uses a Compara.conf
to determine where are the needed core database and connect to them. So let's say the Compara.conf specifies
the location of 5 core dbs which at this stage should (may) be all on the production staging MySQL node, ecs2d.
If we send 40 jobs running generate_dN_dS.pl, that means we are creating 40x5 connections, 200. We can go up to
400 connections without much trouble. Obviously that do not take in account that ecs2d might be used by other 
for heavy connections...

check how many homology_ids, we have

cat *.homology_id|wc -l
     71704

So to have ~40 jobs, we can to submit roughly 1800 at once. (71704/40 = 1792.6)

cd homology_ids_in
cat ../*.homology_id|split -l 1800 -a 3 - homology_ids.
ls |cat -n|sed "s/\./ /"|while read i j k;do mv $j.$k $j.$i;done

submit the one job

echo '/nfs/acari/abel/src/ensembl_main/ensembl-compara/scripts/homology/generate_dN_dS.pl -host ecs2e -dbname ensembl_compara_20_1 -conf_file /ecs2/work4/compara_abel_cara/genepair/Compara.conf -id_file homology_ids.${LSB_JOBINDEX} -dir /ecs2/work4/compara_abel_cara/genepair/dNdS/19_2/homology_ids_dNdS'|bsub -JdNdS"[1]" -o ../homology_ids_out/homology_ids.%I.out

If it is working fine send the others

[...] -JdNdS"[2-40]" [...]

check the output files in ../homology_ids_out to see whether all jobs finished well. 

Load dNdS in compara. No proper script for that yet...:(

cd ../homology_ids_dNdS

The data ouput looks like that

head -2 homology_ids.1.codeml
81435 PIP ENSMUSP00000053262    ENSRNOP00000031446      652.9   262.1   0.06185 0.18269 0.33854 -1558.224
81436 SEED ENSMUSP00000040232   ENSRNOP00000015933      1048.2  301.8   0.01938 0.13382 0.14485 -1979.575

homology_id type stable_id stable_id N S dN dS dN/dS LnL

we are just interested by homology_id, dN and dS

cat *.codeml|awk '{print "update homology set dn="$7",ds="$8",n="$5",s="$6",lnl="$10" where homology_id="$1";"}' > update_dnds.sql

mysql -h ecs2e -u ensadmin -pxxxxxx ensembl_compara_20_1 < update_dnds.sql

Deterining the median cut-off (still need to find a way to store in the compara db, in meta table probably)

mysql> select count(*) from homology where stable_id like "9606_10090%";
+----------+
| count(*) |
+----------+
|    19374 |
+----------+
1 row in set (0.20 sec)

if count is even number the median is the average of (19374/2) 9687th value and the 9688th value

mysql> select ds from homology where stable_id like "9606_10090%" order by ds asc limit 9686,2;
+---------+
| ds      |
+---------+
| 0.62996 |
| 0.63008 |
+---------+
2 rows in set (0.40 sec)

so median is (0.62996+0.63008)/2 = 0.63002

if count id odd number

mysql> select count(*) from homology where stable_id like "9606_10090%";
+----------+
| count(*) |
+----------+
|    19373 |
+----------+
1 row in set (0.20 sec)

Then the median is the ((19373-1)/2) 9686th value

mysql> select ds from homology where stable_id like "9606_10090%" order by ds asc limit 9686,1;
+---------+
| ds      |
+---------+
| 0.62996 |
+---------+
1 row in set (0.45 sec)

For the web display we then apply a cut-off of 2*median. So let's say the median is 0.63002,
the cut-off will be 1.26004 (0.63002*2). So for an homology_id the ds>1.26004 for the paired species
considered, dS and dN values are not considered reliable and not displayed (even though being stored in 
the database)

To set the cut-off in the db,

update homology set threshold_on_ds=1.26004 where stable_id like "9606_10090%";
