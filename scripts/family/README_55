
1- code API needed and executable
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

bioperl-live
ensembl
ensembl-compara

executables
~~~~~~~~~~~
blastall & formatdb
    /software/ensembl/compara/blast-2.2.21/bin/blastall
    /software/ensembl/compara/blast-2.2.21/bin/formatdb

mcl (source can be obtained from http://micans.org/mcl/src/)
	using /nfs/acari/avilella/bin/mcxassemble
	using /nfs/acari/avilella/bin/mcx
	using /nfs/acari/avilella/bin/mcl

mafft
    /software/ensembl/compara/mafft-6.522/bin/mafft

#
# NB: if you are going to run Family pipeline in a separate database,
# make sure you have copied over all the necessary tables from tree/homology database (member, sequence, genome_db).
# Later make sure you have everything for a successful merger (non-colliding ids).


2- Choose a working directory with enough disk space
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Because we no longer keep Blast output in separate files,
# there are no file arrays, so all of the files can happily coexist in the same directory.
# It would be ideal that all blades of the farm and turing could have easy access to it.
#
# I am using ~/family_57 for this purpose.

mkdir ~/family_57

# In addition, we will need another directory for the BlastDB files to live in.
# /data/blastdb on Farm-1 has been compromised during 2 releases (55 and 56),
# so we are moving to Farm-2 and the proposed place for the BlastDB files is:

mkdir -p /lustre/scratch103/ensembl/lg4/family_57
cd /lustre/scratch103/ensembl/lg4/family_57


3- Loading in and dumping the peptides from compara
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# From rel.56 gene homology pipeline is run more independently from family pipeline, in different databases.
# One of the first steps of the gene homology pipeline is loading the EnsEMBL genes from the core database.
# After we get notified when this has happened, the already loaded EnsEMBL genes will have to be copied over.
# from the corresponding tables of gene homology pipeline (along with meta, species_link and SOME OTHER TABLES)

3.1 Create the empty family pipeline database:

mysql --defaults-group-suffix=_compara2 -e 'DROP DATABASE lg4_compara_families_57'
mysql --defaults-group-suffix=_compara2 -e 'CREATE DATABASE lg4_compara_families_57'

3.2 Copy the contents of some gene homology pipeline tables
    ( species_link (used for family creation), member, sequence )
into the new pipeline:

# NB: TESTING ONLY!!!
#
time mysql --defaults-group-suffix=_compara2 lg4_compara_families_57 < load_uniprot_testdb.sql

# NB: the real query:
mysql --defaults-group-suffix=_compara2 lg4_compara_families_57 < ~lg4/work/ensembl-compara/sql/table.sql
mysql --defaults-group-suffix=_compara2 lg4_compara_families_57 < ~lg4/work/ensembl-compara/sql/pipeline-tables.sql
mysql --defaults-group-suffix=_compara2 lg4_compara_families_57 < ~lg4/work/ensembl-hive/sql/tables.sql
#
time mysqldump --defaults-group-suffix=_compara3 avilella_compara_homology_57 -t \
member sequence ncbi_taxa_name ncbi_taxa_node method_link genome_db species_set method_link_species_set \
| mysql --defaults-group-suffix=_compara2 lg4_compara_families_57
mysql --defaults-group-suffix=_compara2 lg4_compara_families_57 -e 'ALTER TABLE member ENGINE=InnoDB, AUTO_INCREMENT=100000000'
mysql --defaults-group-suffix=_compara2 lg4_compara_families_57 -e 'ALTER TABLE sequence ENGINE=InnoDB, AUTO_INCREMENT=100000000'
# takes about 6 minutes

3.3 Load the UniProt members using the pipeline itself:

cat <<EOF >srs.params
"srs" => "SWISSPROT", "tax_div" => "FUN"
"srs" => "SWISSPROT", "tax_div" => "HUM"
"srs" => "SWISSPROT", "tax_div" => "MAM"
"srs" => "SWISSPROT", "tax_div" => "ROD"
"srs" => "SWISSPROT", "tax_div" => "VRT"
"srs" => "SWISSPROT", "tax_div" => "INV"
"srs" => "SPTREMBL", "tax_div" => "FUN"
"srs" => "SPTREMBL", "tax_div" => "HUM"
"srs" => "SPTREMBL", "tax_div" => "MAM"
"srs" => "SPTREMBL", "tax_div" => "ROD"
"srs" => "SPTREMBL", "tax_div" => "VRT"
"srs" => "SPTREMBL", "tax_div" => "INV"
EOF

/nfs/team71/analysis/lg4/work/ensembl-hive_HEAD/scripts/cmd_hive.pl \
-url mysql://ensadmin:ensembl@compara2:3306/lg4_compara_families_57 \
-input_id '{ $inputfile }' -parameters '{ }' \
-inputfile srs.params -logic_name family_load_uniprot_57 -module Bio::EnsEMBL::Compara::RunnableDB::LoadUniProt

rm srs.params

beekeeper.pl -url mysql://ensadmin:ensembl@compara2:3306/lg4_compara_families_57 -sync

# Each loading job may take several hours, so it is wise to run them in the long queue:
beekeeper.pl -url mysql://ensadmin:ensembl@compara2:3306/lg4_compara_families_57 \
-lsf_options '-q long -R"select[mycompara2<1000] rusage[mycompara2=10:duration=10:decay=1]"' \
-lifespan 1200 -loop -logic_name family_load_uniprot_57



## Before loading, make sure that in each core db:
## a) stable ids are in (look in tables 'exon_stable_id', 'translation_stable_id', 'transcript_stable_id' 
##    and 'gene_stable_id')
#
# mysql -hens-staging -uensro -N -e  "show databases" | grep core | grep "\_56" | grep -v expression | while read i; do echo $i; echo "-----"; mysql -hens-staging -uensro $i -N -e "select * from exon_stable_id limit 10"; echo "---"; mysql -hens-staging -uensro $i -N -e "select * from translation_stable_id limit 10"; echo "---"; mysql -hens-staging -uensro $i -N -e "select * from transcript_stable_id limit 10"; echo "---"; mysql -hens-staging -uensro $i -N -e "select * from gene_stable_id limit 10"; echo "---"; done | less
# 
# # b) species data in 'meta' table up to date
# 
# mysql -hens-staging -uensro -N -e  "show databases" | grep core | grep "\_56" | grep -v expression | while read i; do echo $i; echo "-----"; mysql -hens-staging -uensro $i -N -e "select * from meta" | grep species; echo "---"; done | less
# 
# # c) check the gene type e.g. pseudogene or RNA that you don't want to load and update the filter out condition if necessary
# 
# mysql -hens-staging -uensro -N -e  "show databases" | grep core | grep "\_56" | grep -v expression | while read i; do echo $i; echo "-----"; mysql -hens-staging -uensro $i -N -e "select count(*) as number, biotype from gene group by biotype order by number desc"; echo "---"; done | less
# 

# perform the actual dump:
#
time ~lg4/work/ensembl-compara/scripts/pipeline/comparaDumpAllPeptides.pl --dbhost compara2 --dbport 3306 --dbuser ensro --dbname lg4_compara_families_56 --idprefixed 1 --noredundancy --fasta metazoa_56.pep > metazoa_56.pep.err 2>&1
#
# rel.56    4m30 (it was run in ~/family_56 as opposed to lustre mess)
# rel.55    ~20m (mostly waiting for the MySQL server to fetch the data

grep '>' metazoa_56.pep | wc -l
# rel.56    2467787
# rel.55    2307222
# rel.54    2188240
# rel.5?    2023775
# rel.51    1811409
# rel.50    1695699
# rel.49    1653108
# rel.48    1520968


4- Format the fasta file for Blast
   ~~~~~~~~~~~~~~~~~~~~~

# Formatting the fasta file for future BLASTPing:
#
#       WARNING! WARNING! WARNING!
#
#       Don't run it remotely on the farm. Neither run it in a "lustre" directory - they are clearly buggy (as of June 2009).
#       Take a risk and do the whole thing on the farm-login node in your home directory, and then copy the files over.
#       This is a very prescious database, as the whole pipeline will depend on it. Don't leave it to the LSF/lustre to break it.
#
time /software/ensembl/compara/blast-2.2.21/bin/formatdb -p T -l metazoa_56.pep.formatdb.log -i metazoa_56.pep
#
# rel.56    (blast 2.2.21)  2m19
# rel.55    (blast 2.2.6)   ~5m

# check metazoa_56.pep.formatdb.log if it is ok delete it

# Formatted 2023775 sequences in volume 0

rm -f metazoa_56.pep.formatdb.log



6- Run FamilyBlast.pm analysis
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# The following should now be a part of pipeline-tables.sql
#
## make sure the database contains mcl_matrix table:
##
#mysql --host compara2 --port 3306 --user ensadmin --password=ensembl lg4_compara_families_56 -e 'DROP TABLE IF EXISTS mcl_matrix'
#mysql --host compara2 --port 3306 --user ensadmin --password=ensembl  lg4_compara_families_56 -e 'CREATE TABLE mcl_matrix (id int(10) unsigned NOT NULL, rest mediumtext NOT NULL, PRIMARY KEY (id)) ENGINE=InnoDB'
#

# Load the analysis using the cmd_hive.pl script with somewhat extended functionality:

time /nfs/team71/analysis/lg4/work/ensembl-hive_HEAD/scripts/cmd_hive.pl -url mysql://ensadmin:ensembl@compara2:3306/lg4_compara_families_56 -input_id '{ "sequence_id" => "$suffix", "minibatch" => "$suffixn" }' -parameters '{ "fastadb" => "/lustre/scratch103/ensembl/lg4/family_56/metazoa_56.pep", "idprefixed" => 1 }' -suffix_a 1 -suffix_b 2467787 -step 100 -hive_capacity 1000 -logic_name family_blast_56 -module Bio::EnsEMBL::Compara::RunnableDB::FamilyBlast
#
# rel.56    0m23
# rel.55    ~1m

cd ~/family_56

# export PATH=$PATH:/nfs/team71/analysis/lg4/work/ensembl-hive/scripts

beekeeper.pl -url mysql://ensadmin:ensembl@compara2:3306/lg4_compara_families_56 -sync

# in the long Q:
beekeeper.pl -url mysql://ensadmin:ensembl@compara2:3306/lg4_compara_families_56 -lsf_options '-q long -R"select[mycompara2<1000] rusage[mycompara2=10:duration=10:decay=1]"' -lifespan 1200 -loop -logic_name family_blast_56

# in the normal Q:
beekeeper.pl -url mysql://ensadmin:ensembl@compara2:3306/lg4_compara_families_56 -lsf_options '-R"select[mycompara2<1000] rusage[mycompara2=10:duration=10:decay=1]"' -lifespan 1200 -loop -logic_name family_blast_56



8- Build the matrix needed by mcl and check it for symmetry
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# The following script is supposed to automate everything in "8- " and needs the following parameters:
#
#           (1) the DB connection parameters (this DB has to have a filled-in 'mcl_matrix' table)
#           (2) nameprefix (legacy from the way the mcxassemble.sh.tcx takes in the parameters)
#

## NB: it is better to execute this script on one of the Farm-2 machines - they now have an access to the 'hugemem' queue.
#  (otherwise the last step (the matrix assembly itself) will fail and may need to be re-submitted manually)

/nfs/team71/analysis/lg4/work/ensembl-compara_HEAD/scripts/family/dump_matrix_for_mcl.pl -dbhost compara2 -dbport 3306 -dbuser ensro -dbname lg4_compara_families_56 -nameprefix family_56

# After execution make sure you have kept .tcx file in a turing-accessible place and got rid of the huge .raw file.



9- Run mcl
   ~~~~~~~

This step uses turing which has 192Gb of memory :))) and 16 CPUs. As mcl can be multi-threaded, it is very useful.

Try to use 12 cpus, less if available in the hugemem queue, try to use lots of RAM, less if available:

for n in `seq 12 -1 1`
do
        for mem in `seq 95000 -20000 35000`
        do
                sleep 1
                hmem=$(($mem * 1000))
                export TIMESTAMP=`date +2%3y%m%d_%H%M%S` && bsub -o $TIMESTAMP.out -e $TIMESTAMP.err -C0 -R "select[ncpus>=$n && mem>$mem] rusage[mem=$mem] span[hosts=1]" -M$hmem -q hugemem -n $n "/nfs/acari/avilella/src/mcl-08-152/src/shmcl/mcl ~/family_56/family_56.tcx -I 2.1 -t $n -tf 'gq(50)' -scheme 6 -o ~/family_56/family_56.mcl.turing.gq50.6.$n.$mem.$TIMESTAMP"
                done
done

# Once you have one of the jobs running, kill the remaining pending jobs with "bkill jobid".
#


# After this step is done, rename the file with the funky long name into family_56.mcl
#
#

# to save space
#
bsub 'gzip family_56.tcx'
#
# took 16 minutes in rel.55


10- Load into compara database
    ~~~~~~~~~~~~~~~~~~~~~~~~~

# Fix the Uniprot descriptions if it has not been done during loading
#
# NB: NB: NB: only run this script once! :
#
    ~lg4/work/ensembl-compara_HEAD/scripts/family/fix_descriptions.pl -dbhost compara2 -dbport 3306 -dbuser ensadmin -dbpass ensembl -dbname lg4_compara_families_56 -force
#
# (takes seconds)


# You'll need a compara database set up, with genome_db, taxon, and method_link tables prefilled.

# Your reg_conf_56.pl should be something like:

cat <<EOF >~/family_56/reg_conf_56.pl
use strict;
use Bio::EnsEMBL::Utils::ConfigRegistry;
use Bio::EnsEMBL::Compara::DBSQL::DBAdaptor;

new Bio::EnsEMBL::Compara::DBSQL::DBAdaptor(-host => 'compara2',
                                            -user => 'ensadmin',
                                            -pass => 'ensembl',
                                            -port => 3306,
                                            -species => 'compara56',
                                            -dbname => 'lg4_compara_families_56');
1;
EOF

# This takes around an hour, and you can not do anything else before the loading is completed.
#
# NB: turing doesn't have neither /usr/local/bin/perl nor /software/bin/perl,
#     so parse_mcl.pl will need an additional dance to be performed

nohup ~lg4/work/ensembl-compara_HEAD/scripts/family/parse_mcl.pl --reg_conf reg_conf_56.pl --prefix fam56 family_56.mcl compara56 > family_56.description 2> family_56.description.err &

# to save space
#
bsub 'gzip family_56.mcl'


11- Run FamilyMafft.pm analysis over all the families
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# !!!Step 13 should be run also at the same time. It is not dependent on multiple alignments.

#
# Make sure the tables that will be updated the most (hive, family_member) are InnoDB,
# as the DB traffic (of parallel inserts) in this analysis is really high:
#
mysql -hcompara2 -P3306 -uensro lg4_compara_families_56 -N -e "alter table hive engine=InnoDB"
mysql -hcompara2 -P3306 -uensro lg4_compara_families_56 -N -e "alter table family_member engine=InnoDB"



mysql -hcompara2 -P3306 -uensro lg4_compara_families_56 -N -e "select count(*), family_id from family_member where cigar_line IS NULL group by family_id having count(*)>1" | wc -l
# rel.56    98401
# rel.55    94930
# rel.54    88799
# rel.5?    80681
# rel.51    74656
# rel.50    72676
# rel.49     6413 (sic!)
# rel.48    44852
# rel.47    43834

# Get a list of all the family ids with more than one member. If you get it in random order, then the size of each id will be randomly spread in the list, and the jobs
# will be more randomly distributed in terms of CPU time
mysql -hcompara2 -P3306 -uensro lg4_compara_families_56 -N -e "select family_id from family_member group by family_id having count(*)>1 order by RAND()" > family_ids_rand.txt


# Upload the Mafft multiple alignment jobs using cmd_hive.pl
# (the module to be run is our shiny new FamilyMafft.pm)
#
time /nfs/team71/analysis/lg4/work/ensembl-hive_HEAD/scripts/cmd_hive.pl -url mysql://ensadmin:ensembl@compara2:3306/lg4_compara_families_56 -input_id '{ "family_id" => "$inputfile" }' -inputfile ~/family_56/family_ids_rand.txt -hive_capacity 400 -batch_size 10 -logic_name family_mafft_56 -module Bio::EnsEMBL::Compara::RunnableDB::FamilyMafft

# export PATH=$PATH:/nfs/team71/analysis/lg4/work/ensembl-hive/scripts

beekeeper.pl -url mysql://ensadmin:ensembl@compara2:3306/lg4_compara_families_56 -sync

beekeeper.pl -url mysql://ensadmin:ensembl@compara2:3306/lg4_compara_families_56 -lsf_options '-R"select[mycompara2<500] rusage[mycompara2=10:duration=10:decay=1]"' -lifespan 1200 -loop -logic_name family_mafft_56


# A certain number of the failed ones will have to be re-run with more memory:
beekeeper.pl -url mysql://ensadmin:ensembl@compara2:3306/lg4_compara_families_56 -lsf_options '-R"select[mycompara2<500 && mem>15000] rusage[mycompara2=10:duration=10:decay=1:mem=15000]" -M15000000' -lifespan 1200 -loop -logic_name family_mafft_56
#
# in rel.54 only 7 first (biggest) families needed to be run with more memory (and were executed directly, bypassing the LSF, on turing)

# in rel.55 only 2 families (#1 (with 13721 members) and #174 (with 723 members) ) could not be run on farm2 with usual amount of resources
#
# They were run separately on Turing (set batch_count in analysis_stats to 1 if you want to use beekeeper + hugemem queue combination efficiently).
# Parallel execution of the two took 20 hours.

# in rel.56 (farm-2) only the biggest family (#1) needed to be run separately on Turing



12- Insert the redundant proteins in the compara db
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#First, set all singletons cigar_line to the length(m.sequence) + "M", because some singletons will disappear with the addition of redundant sequences.

time mysql -h compara2 -u ensro -P3306 -N -e "select family_id,count(*) as count from family_member group by family_id having count=1" lg4_compara_families_56 | awk '{print "select family_id, length(s.sequence) from member m,family_member fm, sequence s where fm.member_id=m.member_id and fm.family_id="$1" and s.sequence_id = m.sequence_id;"}'|mysql -h compara2 -u ensro -P3306 -N lg4_compara_families_56 |awk '{print "update family_member set cigar_line=\""$2"M\" where family_id="$1";"}'|sort -u > update_singletons_cigar_line.sql
# rel.56    5m
# rel.55    4m
# rel.54    52m

time mysql -h compara2 -uensadmin -pensembl -P3306 lg4_compara_families_56 < update_singletons_cigar_line.sql
# rel.56    2m50
# rel.55    5m
# rel.56    1h

~lg4/work/ensembl-compara_HEAD/scripts/family/InsertRedundantPeptidesAndGenesInFamilies.pl --reg_conf reg_conf_56.pl --dbname compara56 > Redundancy_and_Genes_load.err 2>&1
# rel.56    5m
# rel.55    14m
# rel.54    86m

# IMPORTANT: add healthcheck about NULL cigar_line
mysql -hcompara2 -P3306 -uensro lg4_compara_families_56 -e "select m.source_name,count(*) from family_member fm, member m where fm.member_id=m.member_id and fm.cigar_line is NULL group by m.source_name"

# This should return count for ENSEMBLGENE;

mysql -hcompara2 -P3306 -uensro lg4_compara_families_56 -e "select fm.family_id,count(*) from family_member fm, member m where fm.member_id=m.member_id and fm.cigar_line is NULL and m.source_name!='ENSEMBLGENE' group by fm.family_id"

This should only list the families for which multiple alignment could not be run.

# E.g.:
# +-----------+----------+
# | family_id | count(*) |
# +-----------+----------+
# |       178 |      691 | 
# +-----------+----------+


13- Generates the family descriptions
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


####  The following part really sucks and need a profound rethinking to get the description more clean and consistent.

time ~lg4/work/ensembl-compara_HEAD/scripts/family/consensifier.pl -d "Uniprot/SWISSPROT" family_56.description > family_56.description.SWISSPROT-consensus 2> family_56.description.SWISSPROT-consensus.err
#
# rel.56    6m30
# rel.55    12m
# rel.54    28m

time ~lg4/work/ensembl-compara_HEAD/scripts/family/consensifier.pl -d "Uniprot/SPTREMBL" family_56.description > family_56.description.SPTREMBL-consensus 2> family_56.description.SPTREMBL-consensus.err
#
# rel.56    4h
# rel.55    8h20m
# rel.54    8h

time ~lg4/work/ensembl-compara_HEAD/scripts/family/assemble-consensus.pl family_56.description family_56.description.SWISSPROT-consensus family_56.description.SPTREMBL-consensus  > family_56.description-consensus 2> family_56.description-consensus.err
#
# rel.56    2m
# rel.55    5m
# rel.54    4m


# update the family description in ensembl_family_56 with the data in family_56.description-consensus using ensembl-compara/scripts/family/LoadDescriptionInFamily.pl 
# (Use the same reg_conf.pl as in step 11)

time ~lg4/work/ensembl-compara_HEAD/scripts/family/LoadDescriptionInFamily.pl --reg_conf reg_conf_56.pl --dbname compara56 family_56.description-consensus
#
# rel.56    2m40
# rel.55    5m
# rel.54    55m

