## Configuration file for the MCL family pipeline (development in progress)
#
## Run it like this:
#
# time init_pipeline.pl -conf family_pipeline.conf
# 
# rel.57    <6min

my $release = '57plus';

my $email   = $ENV{'USER'}.'@ebi.ac.uk';    # NB: your EBI address may differ from the Sanger one!

    # code directories:
my $cvs_root_dir      = $ENV{'HOME'}.'/work';
#my $cvs_root_dir      = $ENV{'HOME'}.'/ensembl_main'; ## for some Compara developers

my $old_scripts_dir   = $cvs_root_dir.'/ensembl-compara/scripts/family';

my $sec_root_dir      = '/software/ensembl/compara';
my $mafft_root_dir    = $sec_root_dir . '/mafft-6.522';

my $blastplus_bin_dir = $sec_root_dir . '/ncbi-blast-2.2.22+/bin';
my $mcl_bin_dir       = $sec_root_dir . '/mcl-09-308/bin';
    
    # data directories:
my $main_pipe_dir   = $ENV{'HOME'}."/family_${release}";
my $lustre_pipe_dir = '/lustre/scratch103/ensembl/'.$ENV{'USER'}."/family_${release}";
my $blastdb_name    = "metazoa_${release}.pep";
my $tcx_name        = "family_${release}.tcx";
my $itab_name       = "family_${release}.itab";
my $mcl_name        = "family_${release}.mcl";
my $desc_name       = "family_${release}.description";
my $cons_name       = "family_${release}.consensus";

    # family database connection parameters (our main database):
my $pipeline_db = {
    -host   => 'compara2',
    -port   => 3306,
    -user   => 'ensadmin',
    -pass   => 'ensembl',
    -dbname => "lg4_compara_family_${release}",
};

    # homology database connection parameters (we inherit half of the members and sequences from there):
my $homology_db  = {
    -host   => 'compara3',
    -port   => 3306,
    -user   => 'ensadmin',
    -pass   => 'ensembl',
    # -dbname => "avilella_compara_homology_${release}",
    #
    -dbname => 'avilella_compara_homology_57f',
};

sub dbconn_2_mysql {
    my ($db_conn, $with_db) = @_;

    return "--host=$db_conn->{-host} --port=$db_conn->{-port} "
          ."--user=$db_conn->{-user} --pass=$db_conn->{-pass} "
          .($with_db ? $db_conn->{-dbname} : '');
} 

sub dbconn_2_url {
    my $db_conn = shift @_;

    return "mysql://$db_conn->{-user}:$db_conn->{-pass}\@$db_conn->{-host}:$db_conn->{-port}/$db_conn->{-dbname}";
}


{
        # pass connection parameters into the pipeline initialization script to create adaptors:
    -pipeline_db => $pipeline_db,

        # shell commands that create and pre-fill the pipeline database:
    -pipeline_create_commands => [
        'mysql '.dbconn_2_mysql($pipeline_db, 0)." -e 'CREATE DATABASE $pipeline_db->{-dbname}'",

        'mysql '.dbconn_2_mysql($pipeline_db, 1)." <$cvs_root_dir/ensembl-hive/sql/tables.sql",
        'mysql '.dbconn_2_mysql($pipeline_db, 1)." <$cvs_root_dir/ensembl-hive/sql/procedures.sql",
        'mysql '.dbconn_2_mysql($pipeline_db, 1)." <$cvs_root_dir/ensembl-compara/sql/table.sql",
        'mysql '.dbconn_2_mysql($pipeline_db, 1)." <$cvs_root_dir/ensembl-compara/sql/pipeline-tables.sql",

        'mysqldump '.dbconn_2_mysql($homology_db, 1)
                    .' -t ncbi_taxa_name ncbi_taxa_node method_link genome_db species_set method_link_species_set '
                    .'| mysql '.dbconn_2_mysql($pipeline_db, 1),

        'mysqldump '.dbconn_2_mysql($homology_db, 1)
                    .' -t member sequence family family_member | sed "s/ENGINE=MyISAM/ENGINE=InnoDB/" '
                    .'| mysql '.dbconn_2_mysql($pipeline_db, 1),

        'mysql '.dbconn_2_mysql($pipeline_db, 1)." -e 'ALTER TABLE member   AUTO_INCREMENT=100000000'",
        'mysql '.dbconn_2_mysql($pipeline_db, 1)." -e 'ALTER TABLE sequence AUTO_INCREMENT=100000000'",

        "mkdir -p $main_pipe_dir",
        "mkdir -p $lustre_pipe_dir",
    ],

    -pipeline_analyses => [
        {   -logic_name => 'load_uniprot_factory',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::JobFactory',
            -parameters => {
                'logic_name'    => 'load_uniprot',
                'inputlist'     => ['FUN','HUM','MAM','ROD','VRT','INV'],
                'numeric'       =>  0,
            },
            -input_ids => [
                { 'input_id' => { 'srs' => 'SWISSPROT', 'tax_div' => '$RangeStart' } },
                { 'input_id' => { 'srs' => 'SPTREMBL',  'tax_div' => '$RangeStart' } },
            ],
        },

        {   -logic_name    => 'load_uniprot',
            -module        => 'Bio::EnsEMBL::Compara::RunnableDB::LoadUniProt',
            -parameters    => {},
            -hive_capacity => 20,
            -input_ids     => [
                # (jobs for this analysis will be created by the JobFactory above)
            ],
            -wait_for  => [ 'load_uniprot_factory' ],
        },
        
        {   -logic_name => 'dump_member_proteins',
            -module     => 'Bio::EnsEMBL::Compara::RunnableDB::DumpMemberSequencesIntoFasta',
            -parameters => {
                'source_names' => [ 'ENSEMBLPEP','Uniprot/SWISSPROT','Uniprot/SPTREMBL' ],
                'idprefixed' => 1,
            },
            -input_ids => [
                { 'fasta_name' => "${main_pipe_dir}/${blastdb_name}", },
            ],
            -wait_for  => [ 'load_uniprot_factory', 'load_uniprot' ],
        },

        {   -logic_name => 'make_blastdb',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
            -parameters => { 
                'blastplus_bin_dir' => $blastplus_bin_dir,
                'work_dir'          => $main_pipe_dir,
            },
            -input_ids => [
                { 'cmd' => "#blastplus_bin_dir#/makeblastdb -dbtype prot -parse_seqids -logfile #work_dir#/makeblastdb.log -in #work_dir#/${blastdb_name}", },
            ],
            -wait_for => [ 'dump_member_proteins' ],
        },

        {   -logic_name => 'copy_blastdb_over',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
            -parameters => {
                'work_dir'   => $main_pipe_dir,
                'target_dir' => $lustre_pipe_dir,
            },
            -input_ids => [
                { 'cmd' => "cp #work_dir#/${blastdb_name}* #target_dir#", },
            ],
            -wait_for => [ 'make_blastdb' ],
        },

        {   -logic_name => 'family_blast_factory',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::JobFactory',
            -parameters => {
                'logic_name' => 'family_blast',
                'inputquery' => 'SELECT DISTINCT s.sequence_id FROM member m, sequence s WHERE m.sequence_id=s.sequence_id AND m.source_name IN ("Uniprot/SPTREMBL", "Uniprot/SWISSPROT", "ENSEMBLPEP") ',
                'step'       => 100,
                'numeric' => 1,
            },
            -input_ids => [
                { 'input_id' => { 'sequence_id' => '$RangeStart', 'minibatch' => '$RangeCount' }, },
            ],
            -wait_for => [ 'copy_blastdb_over' ],
        },

        {   -logic_name => 'notify_run_blasts',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::NotifyByEmail',
            -parameters => {
                'email'   => $email,
                'subject' => 'FamilyPipeline: please restart me with new parameters',
                'text'    => 'beekeeper.pl -url '.dbconn_2_url($pipeline_db)." -loop -lifespan 1200 -lsf_options '#lsf_options#'",
            },
            -input_ids => [
                { 'lsf_options' => '-q long -R"select[mycompara2<1000] rusage[mycompara2=10:duration=10:decay=1]"', },
            ],
            -wait_for => [ 'family_blast_factory' ],
        },

        #----------------------------------------[human intervention]------------------------------------------------

        {   -blocked  => 1,

            -logic_name    => 'family_blast',
            -module        => 'Bio::EnsEMBL::Compara::RunnableDB::FamilyBlast',
            -parameters    => {
                'fastadb'    => "${lustre_pipe_dir}/${blastdb_name}",
                'idprefixed' => 1,
            },
            -hive_capacity => 1000,
            -input_ids     => [
                # (jobs for this analysis will be created by the JobFactory above)
            ],
        },

        {   -logic_name => 'notify_run_mcxload',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::NotifyByEmail',
            -parameters => {
                'email'   => $email,
                'subject' => 'FamilyPipeline: please restart me with new parameters to run mcxload',
                'text'    => 'beekeeper.pl -url '.dbconn_2_url($pipeline_db)." -loop -lifespan 1200 -lsf_options '#lsf_options#'",
            },
            -input_ids => [
                { 'lsf_options' => '-C0 -M15000000 -R"select[mem>15000] rusage[mem=15000]"', },
            ],
            -wait_for => [ 'family_blast_factory', 'family_blast' ],
        },

        #----------------------------------------[human intervention]------------------------------------------------
        
        {   -blocked  => 1,

            -logic_name => 'dump_matrix_to_mcxload',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
            -parameters => {
                'mcl_bin_dir'       => $mcl_bin_dir,
                'work_dir'          => $main_pipe_dir,
                'db_conn'           => dbconn_2_mysql($pipeline_db, 1),
            },
            -input_ids  => [
                { 'cmd' => "mysql #db_conn# -N -q -e 'select * from mcl_sparse_matrix' | #mcl_bin_dir#/mcxload -abc - -ri max -o #work_dir#/${tcx_name} -write-tab #work_dir#/${itab_name}", },
            ],
        },

        {   -logic_name => 'notify_run_mcl',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::NotifyByEmail',
            -parameters => {
                'email'   => $email,
                'subject' => 'FamilyPipeline: please restart me with new parameters to run mcl',
                'text'    => 'beekeeper.pl -url '.dbconn_2_url($pipeline_db)." -loop -lifespan 1200 -lsf_options '#lsf_options#'",
            },
            -input_ids => [
                { 'lsf_options' => '-C0 -M50000000 -n 4 -q hugemem -R"select[ncpus>=4 && mem>50000] rusage[mem=50000] span[hosts=1]"', },
            ],
            -wait_for => [ 'dump_matrix_to_mcxload' ],
        },

        #----------------------------------------[human intervention]------------------------------------------------
        
        {   -blocked  => 1,

            -logic_name => 'mcl',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
            -parameters => {
                'mcl_bin_dir'     => $mcl_bin_dir,
                'work_dir'        => $main_pipe_dir,
            },
            -input_ids => [
                { 'cmd' => "#mcl_bin_dir#/mcl #work_dir#/${tcx_name} -I 2.1 -t 4 -tf 'gq(50)' -scheme 6 -use-tab #work_dir#/${itab_name} -o #work_dir#/${mcl_name}", },
            ],
        },

        {   -logic_name => 'notify_load_families',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::NotifyByEmail',
            -parameters => {
                'email'   => $email,
                'subject' => 'FamilyPipeline: please restart me without parameters to run parse_mcl',
            },
            -input_ids => [
                { 'text'    => 'beekeeper.pl -url '.dbconn_2_url($pipeline_db).' -loop', },
            ],
            -wait_for => [ 'mcl' ],
        },

        #----------------------------------------[human intervention]------------------------------------------------
        
        {   -blocked    => 1,

            -logic_name => 'parse_mcl',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
            -parameters => {
                'old_scripts_dir' => $old_scripts_dir,
                'db_conn'         => dbconn_2_mysql($pipeline_db, 1),
                'work_dir'        => $main_pipe_dir,
            },
            -input_ids => [
                { 'cmd' => "#old_scripts_dir#/parse_mcl.pl #db_conn# -prefix fam57 #work_dir#/${mcl_name} >#work_dir#/${desc_name} 2>#work_dir#/${desc_name}.err", },
            ],
        },

        {   -logic_name => 'archive_long_files',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
            -parameters => {
                'work_dir'        => $main_pipe_dir,
            },
            -input_ids => [
                { 'cmd' => "gzip #work_dir#/${tcx_name}", },
                { 'cmd' => "gzip #work_dir#/${itab_name}", },
                { 'cmd' => "gzip #work_dir#/${mcl_name}", },
            ],
            -wait_for => [ 'parse_mcl' ],
        },

        {   -logic_name => 'family_mafft_factory',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::JobFactory',
            -parameters => {
                'inputquery' => 'SELECT family_id FROM family_member GROUP BY family_id HAVING count(*)>1',
                'randomize'  => 1,
                'numeric'    => 1,
                'input_id'   => { 'family_id' => '$RangeStart' },
            },
            -input_ids  => [
                { 'logic_name' => 'family_mafft_big',  'inputlist'  => [ 1 ],},
                { 'logic_name' => 'family_mafft_main', 'inputquery' => 'SELECT family_id FROM family_member WHERE family_id>1 GROUP BY family_id HAVING count(*)>1',},
            ],
            -wait_for => [ 'parse_mcl' ],
        },

        {   -logic_name => 'notify_mafft',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::NotifyByEmail',
            -parameters => {
                'email'   => $email,
                'subject' => 'FamilyPipeline: please restart me with new parameters to run mafft (one of two notifications)',
                'text'    => 'beekeeper.pl -url '.dbconn_2_url($pipeline_db)." -loop -lifespan 1200 #extras#",
            },
            -input_ids => [
                { 'extras' => q{-logic_name family_mafft_big -lsf_options '-R"select[mycompara2<500 && mem>14000] rusage[mycompara2=10:duration=10:decay=1:mem=14000]" -M14000000'}, },
                { 'extras' => q{-lsf_options '-R"select[mycompara2<500] rusage[mycompara2=10:duration=10:decay=1]"'}, },
            ],
            -wait_for => [ 'family_mafft_factory' ],
        },

        #----------------------------------------[human intervention]------------------------------------------------

        {   -blocked       => 1,

            -logic_name    => 'family_mafft_big',
            -module        => 'Bio::EnsEMBL::Compara::RunnableDB::FamilyMafft',
            -parameters    => { },
            -batch_size    => 1,
            -input_ids     => [
                # (jobs for this analysis will be created by the JobFactory above)
            ],
        },

        {   -blocked       => 1,

            -logic_name    => 'family_mafft_main',
            -module        => 'Bio::EnsEMBL::Compara::RunnableDB::FamilyMafft',
            -parameters    => { },
            -hive_capacity => 400,
            -batch_size    =>  10,
            -input_ids     => [
                # (jobs for this analysis will be created by the JobFactory above)
            ],
        },

        #(12)-----------------[one branch that carries on from family_mafft_main]----------------------------------

        {   -logic_name => 'update_singleton_cigars',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SqlCmd',
            -parameters => {
                'find_singletons' => "CREATE TEMPORARY TABLE singletons SELECT family_id,length(s.sequence) len,count(*) AS count FROM family_member fm, member m, sequence s WHERE fm.member_id=m.member_id AND m.sequence_id=s.sequence_id GROUP BY family_id HAVING count=1",
                'update_cigars'   => "UPDATE family_member fm, member m, singletons st SET fm.cigar_line=CONCAT(st.len,'M') WHERE fm.family_id=st.family_id and m.member_id=fm.member_id AND m.source_name<>'ENSEMBLGENE'",
            },
            -input_ids => [
                { 'sql' => " #find_singletons# ; #update_cigars# ", },
            ],
            -wait_for => [ 'family_mafft_big', 'family_mafft_main' ],
        },

        {   -logic_name => 'insert_redundant_pep_genes',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
            -parameters => {
                'old_scripts_dir' => $old_scripts_dir,
                'db_conn'         => dbconn_2_mysql($pipeline_db, 1),
                'work_dir'        => $main_pipe_dir,
            },
            -input_ids => [
                { 'cmd' => "#old_scripts_dir#/InsertRedundantPeptidesAndGenesInFamilies.pl #db_conn# >#work_dir#/Redundancy_and_Genes_load.err", },
            ],
            -wait_for => [ 'update_singleton_cigars' ],
        },

        {   -logic_name => 'notify_branch1_completed',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::NotifyByEmail',
            -parameters => {
                'email'   => $email,
                'subject' => 'FamilyPipeline: branch 1 has completed',
            },
            -input_ids => [
                { 'text'    => 'Branch #1 has completed', },
            ],
            -wait_for => [ 'insert_redundant_pep_genes' ],
        },


        #(13)-----------------[anoter independent branch that carries on from parse_mcl]---------------------------

        {   -logic_name => 'consensifier',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
            -parameters => {
                'old_scripts_dir' => $old_scripts_dir,
                'work_dir'        => $main_pipe_dir,
            },
            -input_ids => [
                { 'cmd' => "#old_scripts_dir#/consensifier.pl -d Uniprot/SWISSPROT #work_dir#/${desc_name} >#work_dir#/${cons_name}-SWISSPROT 2>#work_dir#/${cons_name}-SWISSPROT.err", },
                { 'cmd' => "#old_scripts_dir#/consensifier.pl -d Uniprot/SPTREMBL  #work_dir#/${desc_name} >#work_dir#/${cons_name}-SPTREMBL  2>#work_dir#/${cons_name}-SPTREMBL.err", },
            ],
            -wait_for => [ 'parse_mcl' ],
        },

        {   -logic_name => 'assemble_consensus',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
            -parameters => {
                'old_scripts_dir' => $old_scripts_dir,
                'work_dir'        => $main_pipe_dir,
            },
            -input_ids => [
                { 'cmd' => "#old_scripts_dir#/assemble-consensus.pl #work_dir#/${desc_name} #work_dir#/${cons_name}-SWISSPROT #work_dir#/${cons_name}-SPTREMBL >#work_dir#/${cons_name} 2>#work_dir#/${cons_name}.err", },
            ],
            -wait_for => [ 'consensifier' ],
        },

        {   -logic_name => 'load_family_descriptions',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::SystemCmd',
            -parameters => {
                'old_scripts_dir' => $old_scripts_dir,
                'db_conn'         => dbconn_2_mysql($pipeline_db, 1),
                'work_dir'        => $main_pipe_dir,
            },
            -input_ids => [
                { 'cmd' => "#old_scripts_dir#/LoadDescriptionInFamily.pl #db_conn# #work_dir#/${cons_name}", },
            ],
            -wait_for => [ 'assemble_consensus' ],
        },

        {   -logic_name => 'notify_branch2_completed',
            -module     => 'Bio::EnsEMBL::Hive::RunnableDB::NotifyByEmail',
            -parameters => {
                'email'   => $email,
                'subject' => 'FamilyPipeline: branch 2 has completed',
            },
            -input_ids => [
                { 'text'    => 'Branch #2 has completed', },
            ],
            -wait_for => [ 'load_family_descriptions' ],
        },

    ],
};

