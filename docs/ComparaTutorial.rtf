{\rtf1\mac\ansicpg10000\uc1\deff0\stshfdbch4\stshfloch4\stshfhich4\stshfbi0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 00020206030504050203}Times New Roman;}{\f3\fnil\fcharset2\fprq2{\*\panose 00020005000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Courier;}{\f15\fnil\fcharset78\fprq2 \'82l\'82r \'96\'be\'92\'a9;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 00020206030504050203}Times New Roman;}{\f3\fnil\fcharset2\fprq2{\*\panose 00020005000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 00020005000000000000}Courier;}{\f15\fnil\fcharset78\fprq2 \u-211 _\u-205 _ \u26126 _\u26397 _;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \snext0 Normal;}{\s1\qj \li0\ri0\sb240\sa60\sl360\slmult1\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\scaps\fs44\lang2057\langfe1033\kerning32\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 1;}{\s2\qj \li0\ri0\sb240\sa60\sl360\slmult1\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\scaps\fs36\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 2;}{\s3\qj \li0\ri0\sb240\sa60\sl360\slmult1\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0 \b\scaps\fs28\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 3;}{\s4\qj \li0\ri0\sb240\sa60\sl360\slmult1\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0 \b\fs28\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 4;}{\s5\qj \li0\ri0\sl360\slmult1\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel4\adjustright\rin0\lin0\itap0 \b\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}{\*\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f4\fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 Normal Table;}{\*\cs15 \additive \ul\cf2 \sbasedon10 Hyperlink;}{\s16\qj \li283\ri0\sa120\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin283\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext16 List Continue;}{\*\cs17 \additive \ul\cf12 \sbasedon10 FollowedHyperlink;}{\s18\qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f6\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext18 Body Text;}{\s19\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f6\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext19 Plain Text;}{\s20\qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f6\fs16\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext20 code;}{\s21\qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\cf11\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext21 Notes to self;}{\s22\qj \fi-283\li283\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin283\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext22 List;}{\s23\qj \fi-283\li566\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin566\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext23 List 2;}{\s24\qj \fi-360\li643\ri0\sl360\slmult1\widctlpar\jclisttab\tx643{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\aspalpha\aspnum\faauto\ls2\adjustright\rin0\lin643\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext24 \sautoupd List Bullet 2;}{\s25\qj \li283\ri0\sa120\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin283\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext25 Body Text 2;}{\s26\qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \f6\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon18 \snext26 Byline;}}{\*\listtable{\list\listtemplateid1732963642\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 _;}{\levelnumbers;}\loch\af3\dbch\af0\hich\f3 \f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \s24\fi-360\li643\jclisttab\tx643\lin643 }{\listname ;}\listid-125}{\list\listtemplateid1686938650\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 _;}{\levelnumbers;}\loch\af3\dbch\af0\hich\f3 \f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li360\jclisttab\tx360\lin360 }{\listname ;}\listid-119}}{\*\listoverridetable{\listoverride\listid-119\listoverridecount0\ls1}{\listoverride\listid-125\listoverridecount0\ls2}}{\*\rsidtbl \rsid3693937}{\info{\title ENSEMBL COMPARA PERL API TUTORIAL}{\author Abel URETA-VIDAL}{\operator Abel URETA-VIDAL}{\creatim\yr2004\mo11\dy4\hr10\min24}{\revtim\yr2004\mo11\dy4\hr10\min24}{\printim\yr2004\mo11\dy2\hr17\min36}{\version2}{\edmins0}{\nofpages11}{\nofwords3682}{\nofchars20992}{\*\company ebi}{\nofcharsws25779}{\vern24705}}\paperw11899\paperh16838 \ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dghspace180\dgvspace180\dghorigin1701\dgvorigin1984\dghshow0\dgvshow0\jexpand\viewkind1\viewscale150\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\rsidroot16398371 \fet0\sectd \linex0\sectdefaultcl\sectrsid3693937\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s2\qj \li0\ri0\sb240\sa60\sl360\slmult1\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel1\adjustright\rin0\lin0\itap0 \b\scaps\fs36\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b0\scaps0\f5\lang1033\langfe1033\langnp1033\insrsid3693937\charrsid16398371 EnsEMBL}{\b0\f5\lang1033\langfe1033\langnp1033\insrsid3693937\charrsid16398371  Compara Perl API Tutorial\par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 By Cara Woodwark and Abel Ureta-Vidal\par \par Revisions: CW Jun 04, AUV Aug 04, Nov 04\par \par WARNING: this is still a first draft. A polished version is planned in the near future. By now this tutorial should work with the cvs main trunk of the code (that will soon be branch-ensembl-26), and with ensembl databases release 26 (that will be released for November 2004).\par }\pard\plain \s3\qj \li0\ri0\sb240\sa60\sl360\slmult1\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel2\adjustright\rin0\lin0\itap0 \b\scaps\fs28\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 Introduction\par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 \tab This tutorial is an introduction to the ensembl compara API. A knowledge of the ensembl core API is presumed, it is assumed that concepts and conventions presented in the ensembl core API tutorial have been assimilated by the user. The ensembl core API tutorial can be found at }{\f5\cf1\insrsid3693937\charrsid9047379 http://www.ensembl.org/Docs/linked_docs/ensembl_tutorial.pdf}{\f5\insrsid3693937\charrsid16398371  (in cvs, in }{\f5\insrsid3693937\charrsid10292688 ensembl/docs/tutorial/ensembl_tutorial.pdf}{\f5\insrsid3693937\charrsid16398371 ) and should be read first as it provides a comprehensive guide to the ensembl environment. \par \tab A documentation about the compara database schema is available }{\field{\*\fldinst {\f5\insrsid3693937\charrsid16398371  HYPERLINK "http://www.ensembl.org/" }{\f5\insrsid3693937\charrsid13336080 {\*\datafield 00d0c9ea79f9bace118c8200aa004ba90b02000000170000001800000068007400740070003a002f002f007700770077002e0065006e00730065006d0062006c002e006f00720067002f000000e0c9ea79f9bace118c8200aa004ba90b3000000068007400740070003a002f002f007700770077002e0065006e00730065006d0062006c002e006f00720067002f000000}}}{\fldrslt {\cs15\f5\ul\cf2\insrsid3693937\charrsid13336080 http://www.ensembl.org/}}}{\f5\insrsid3693937\charrsid16398371 ???? (in cvs ensembl-compara/docs}{\f5\insrsid3693937\charrsid10292688 /docs/schema_doc.html}{\f5\insrsid3693937\charrsid16398371 )}{\f5\highlight7\insrsid3693937\charrsid16398371 ,}{\f5\insrsid3693937\charrsid16398371  and while not necessary for this tutorial, an understanding of the database tables may help, as many of the Adaptor modules are table specific.\par \par }\pard\plain \s4\qj \li0\ri0\sb240\sa60\sl360\slmult1\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0 \b\fs28\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 Obtaining the code\par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 \tab To use the ensembl compara API, you have the same requirement that when using the ensembl core API i.e. perl 5.6 or later, bioperl 1.2 or later, DBI, DBD::mysql and ensembl core code. Please refer to the ensembl core API tutorial that will tell you everything about these modules, how and where to get them.\par \par \tab In addition, you will need the ensembl compara code that is available by cvs from the ensembl cvs repository using the following cvs commands:\par \par }\pard\plain \s20\qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\fs16\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\insrsid3693937\charrsid16398371 cvs \endash d :pserver:cvsuser@cvsro.sanger.ac.uk:/cvsroot/CVSmaster login\par }\pard \s20\qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f5\insrsid3693937\charrsid16398371 \par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 When prompted the password is \lquote CVS\rquote .\par \par }\pard\plain \s20\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\fs16\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\insrsid3693937\charrsid16398371 cvs \endash d :pserver:cvsuser@cvsro.sanger.ac.uk:/cvsroot/CVSmaster co \endash r branch-ensembl-26 ensembl-compara\par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 \par This will check out ensembl-compara code for stable branch 26. Make sure the ensembl core code you have already checked out is on the same branch. Note that the branch that is checked out should correspond to the database version being used. Thus ensembl_compara_26_1 and e.g. homo-sapiens_core_26_35 and mus_musculus_core_26_33b should be used with the above ensembl branch 26 code.\par \par }\pard\plain \s4\qj \li0\ri0\sb240\sa60\sl360\slmult1\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0 \b\fs28\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 Environment Variables\par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 The following PERL5LIB environment variables should be set up:\par \par under tcsh/csh shell with\par }\pard\plain \s20\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\fs16\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\insrsid3693937\charrsid16398371 setenv PERL5LIB $\{PERL5LIB\}:\{HOME\}/src/bioperl-live: \\\par $\{HOME\}/src/ensembl/modules:$\{HOME\}/src/ensembl-compara/modules\par }\pard \s20\ql \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f5\insrsid3693937\charrsid16398371 \par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 under bash shell with\par }\pard\plain \s20\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\fs16\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\insrsid3693937\charrsid16398371 export PERL5LIB=$\{PERL5LIB\}:\{HOME\}/src/bioperl-live: \\\par $\{HOME\}/src/ensembl/modules:$\{HOME\}/src/ensembl-compara/modules\par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 \par These presume that bioperl and ensembl are in a directory called src set up in your home directory.\par }\pard\plain \s4\qj \li0\ri0\sb240\sa60\sl360\slmult1\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0 \b\fs28\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 Code Conventions (and unconventions)\par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 \tab Refer to the ensembl core tutorial for a good description of the coding conventions normally used in ensembl. Due to historical accidents, there may be exceptions to these rules in compara.\par }{\insrsid3693937\charrsid16398371 \par }\pard\plain \s4\qj \li0\ri0\sb240\sa60\sl360\slmult1\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0\pararsid3693937 \b\fs28\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 Connecting a ensembl compara database\par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\fs24\insrsid3693937\charrsid16398371 Explicitely, using the Bio::EnsEMBL::Compara::DBSQL::DBAdaptor\par }{\f5\insrsid3693937\charrsid16398371 Ensembl compara data as ensembl core data, is stored in a MySQL relational database. If you want to access a compara database, you will need to connect to it. This is done in exactly the same way as when connecting an ensembl core database, but using a Compara specific DBAdaptor.\par \par }\pard\plain \s20\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\fs16\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\insrsid3693937\charrsid16398371 use Bio::EnsEMBL::Compara::DBSQL::DBAdaptor\par \par my $host = \lquote ensembldb.ensembl.org\rquote ;\par my $user = \lquote anonymous\rquote ;}{\i\insrsid3693937\charrsid16398371 \par }{\insrsid3693937\charrsid16398371 my $dbname = \lquote ensembl_compara_26_1\rquote ;\par \par my $comparadb= new Bio::EnsEMBL::Compara::DBSQL::DBAdaptor (-host\tab => $host,\par \tab \tab \tab \tab \tab \tab \tab \tab -user\tab => $user,\par \tab \tab \tab \tab \tab \tab \tab \tab -dbname\tab => $dbname);\par }\pard \s20\qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\insrsid3693937\charrsid16398371 \par }{\f5\fs20\insrsid3693937\charrsid16398371 As for a ensembl core connection, in addition to the parameters provided above, the optional }{\fs20\insrsid3693937\charrsid16398371 port}{\f5\fs20\insrsid3693937\charrsid16398371 , }{\fs20\insrsid3693937\charrsid16398371 driver}{\f5\fs20\insrsid3693937\charrsid16398371  and }{\fs20\insrsid3693937\charrsid16398371 pass}{\f5\fs20\insrsid3693937\charrsid16398371  parameters can also be used to specify the TCP connection port, the type of database driver and the password respectively. These values have sensible defaults and can often be omitted.\par }{\f5\insrsid3693937\charrsid16398371 \par }{\f5\fs24\insrsid3693937\charrsid16398371 Implicitely, using the Bio::EnsEMBL::Registry configuration file (recommended)\par }{\f5\fs20\insrsid3693937\charrsid16398371 \par You will need to have a registry configuration file set up. An example of such file can be found in ensembl/modules/Bio/EnsEMBL/Utils/ensembl_init.example, and below you have a slightly modified copy of it. By default,  this file is named .ensembl_init and should be in your home directory.\par \par }\pard \s20\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\insrsid3693937\charrsid10292688 # Example of configuration file used by Bio::EnsEMBL::Registry::load_all method\par # to store/register all kind of Adaptors.\par \par use strict;\par use Bio::EnsEMBL::Utils::ConfigRegistry;\par use Bio::EnsEMBL::DBSQL::DBAdaptor;\par use Bio::EnsEMBL::Compara::DBSQL::DBAdaptor;\par \par my @aliases;\par  \par new Bio::EnsEMBL::DBSQL::DBAdaptor(-host => 'ensembldb.ensembl.org',\par                                    -user => 'anonymous',\par                                    -port => 3306,\par                                    -species => 'Homo sapiens',\par                                    -group => 'core',\par                                    -dbname => 'homo_sapiens_core_26_35');\par \par @aliases = ('H_Sapiens', 'homo sapiens', 'Homo_Sapiens','Homo_sapiens', 'Homo', 'homo', 'human');\par \par Bio::EnsEMBL::Utils::ConfigRegistry->add_alias(-species => "Homo sapiens",\par                                                -alias => \\@aliases);\par \par \par new Bio::EnsEMBL::DBSQL::DBAdaptor(-host => 'ensembldb.ensembl.org',\par                                    -user => 'anonymous',\par                                    -port => 3306,\par                                    -species => 'Mus musculus',\par                                    -group => 'core',\par                                    -dbname => 'mus_musculus_core_26_33b');\par \par @aliases = ('M_Musculus', 'mus musculus', 'Mus_Musculus','Mus_musculus', 'Mus', 'mus', 'mouse');\par \par Bio::EnsEMBL::Utils::ConfigRegistry->add_alias(-species => "Mus musculus",\par                                                -alias => \\@aliases);\par \par }{\insrsid3693937 new Bio::EnsEMBL::DBSQL::DBAdaptor(-host => 'ensembldb.ensembl.org',\par                                    -user => 'anonymous',\par                                    -port => 3306,\par                                    -species => 'Fugu rubripes',\par                                    -group => 'core',\par                                    -dbname => 'fugu_rubripes_core_26_2c');\par \par @aliases = ('F_Rubripes', 'fugu rubripes', 'Fugu_Rubripes','Fugu_rubripes', 'Fugu', 'fugu');\par \par Bio::EnsEMBL::Utils::ConfigRegistry->add_alias(-species => "Fugu rubripes",\par                                                -alias => \\@aliases);}{\insrsid3693937\charrsid10292688 \par \par new Bio::EnsEMBL::Compara::DBSQL::DBAdaptor(-host => 'ensembldb.ensembl.org',\par                                             -user => 'anonymous',\par                                             -port => 3306,\par                                             -species => 'Compara26',\par                                             -dbname => 'ensembl_compara_26_1');\par \par @aliases = ('ensembl_compara_26_1', 'compara26');\par \par Bio::EnsEMBL::Utils::ConfigRegistry->add_alias(-species => "Compara26",\par                                                -alias => \\@aliases);\par \par 1;\par }\pard \s20\qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f5\fs20\insrsid3693937\charrsid16398371 \par In this configuration file, you can list all the parameters needed to connect a compara database. The compara database is a multi-species database that contains comparative genomic information on all ensembl species. One should then be able not only to connect to a compara database but also to every species ensembl core database. The use of the registry configuration file lets you the freedom to list connection parameters for all ensembl core databases you might need to access in relation to ensembl compara data (in our example, only 3 are mentioned, human, mouse and fugu). All this information is then in a single central place, easy to maintain (modify and update).\par \par The access to database adaptor is done using either the main species alias (specified by the }{\fs20\insrsid3693937\charrsid10292688 -species}{\f5\fs20\insrsid3693937\charrsid16398371  parameter) or one of the aliases specified (in the }{\fs20\insrsid3693937\charrsid10292688 @aliases}{\f5\fs20\insrsid3693937\charrsid16398371  array). No need to remember the complete database name, one of the aliases will be enough.\par \par WARNING: In previous version of this tutorial, an additional parameter }{\insrsid3693937\charrsid3693937 disconnect_when_active => 1}{\f5\fs20\insrsid3693937\charrsid16398371  was specified for all ensembl core databases. It is not needed anymore, as there is now a lazy connection in place i.e. connection will be established only at your first }{\insrsid3693937\charrsid3693937 prepare}{\f5\fs20\insrsid3693937\charrsid16398371  statement and kept alive until you use a }{\insrsid3693937\charrsid3693937 disconnect_if_idle}{\f5\fs20\insrsid3693937\charrsid16398371  (or a more }{\insrsid3693937\charrsid3693937 disconnect}{\f5\fs20\insrsid3693937\charrsid16398371  drastic). If you want to use }{\insrsid3693937\charrsid3693937 disconnect_when_active}{\f5\fs20\insrsid3693937\charrsid16398371  make sure you know what you are doing.\par \par Below is a non exhaustive list of ensembl compara adaptors that are most often used}{\insrsid3693937\charrsid16398371 \par }\pard \s20\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\insrsid3693937\charrsid16398371 GenomeDBAdaptor\tab \tab }{\f5\fs20\insrsid3693937\charrsid16398371 to fetch}{\insrsid3693937\charrsid16398371  Bio::EnsEMBL::Compara::GenomeDB }{\f5\fs20\insrsid3693937\charrsid16398371 objects}{\insrsid3693937\charrsid16398371 \par DnaFragAdaptor\tab \tab \tab }{\f5\fs20\insrsid3693937\charrsid16398371 to fetch}{\insrsid3693937\charrsid16398371  Bio::EnsEMBL::Compara::DnaFrag }{\f5\fs20\insrsid3693937\charrsid16398371 objects}{\insrsid3693937\charrsid16398371 \par GenomicAlignBlockAdaptor\tab }{\f5\fs20\insrsid3693937\charrsid16398371 to fetch}{\insrsid3693937\charrsid16398371  Bio::EnsEMBL::Compara::GenomicAlignBlock }{\f5\fs20\insrsid3693937\charrsid16398371 objects}{\insrsid3693937\charrsid16398371 \par DnaAlignFeatureAdaptor\tab \tab }{\f5\fs20\insrsid3693937\charrsid16398371 to fetch}{\insrsid3693937\charrsid16398371  Bio::EnsEMBL::DnaDnaAlignFeature }{\f5\fs20\insrsid3693937\charrsid16398371 objects \par }\pard \s20\ql \fi720\li2160\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin2160\itap0\pararsid3693937 {\f5\fs20\insrsid3693937\charrsid16398371 (note that this adaptor return a ensembl core object)\par }\pard \s20\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\insrsid3693937\charrsid16398371 SyntenyAdaptor\tab \tab \tab }{\f5\fs20\insrsid3693937\charrsid16398371 to fetch}{\insrsid3693937\charrsid16398371  Bio::EnsEMBL::Compara::SyntenyRegion }{\f5\fs20\insrsid3693937\charrsid16398371 objects}{\insrsid3693937\charrsid16398371 \par MemberAdaptor\tab \tab \tab }{\f5\fs20\insrsid3693937\charrsid16398371 to fetch}{\insrsid3693937\charrsid16398371  Bio::EnsEMBL::Compara::Member }{\f5\fs20\insrsid3693937\charrsid16398371 objects}{\insrsid3693937\charrsid16398371  \par HomologyAdaptor\tab \tab }{\f5\fs20\insrsid3693937\charrsid16398371 to fetch}{\insrsid3693937\charrsid16398371  Bio::EnsEMBL::Compara::Homology }{\f5\fs20\insrsid3693937\charrsid16398371 objects}{\insrsid3693937\charrsid16398371 \par FamilyAdaptor\tab \tab \tab }{\f5\fs20\insrsid3693937\charrsid16398371 to fetch}{\insrsid3693937\charrsid16398371  Bio::EnsEMBL::Compara::Family }{\f5\fs20\insrsid3693937\charrsid16398371 objects}{\insrsid3693937\charrsid16398371 \par PeptideAlignFeatureAdaptor\tab }{\f5\fs20\insrsid3693937\charrsid16398371 to fetch}{\insrsid3693937\charrsid16398371  Bio::EnsEMBL::Compara::PeptideAlignFeature\par }\pard \s20\ql \fi720\li2160\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin2160\itap0\pararsid3693937 {\f5\fs20\insrsid3693937\charrsid16398371 objects}{\insrsid3693937\charrsid16398371 \par }\pard \s20\qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f5\insrsid3693937\charrsid16398371 \par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 Only some of these adaptors will be used for illustration as part of this tutorial through commented perl scripts code.\par }\pard\plain \s4\qj \li0\ri0\sb240\sa60\sl360\slmult1\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0\pararsid3693937 \b\fs28\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 Whole Genome Alignments\par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 The compara database contains a number of different types of whole genome alignments. A much detailed information about what are these different types can be found here\par }{\f5\fs16\lang1033\langfe1033\langnp1033\insrsid3693937\charrsid16398371 \par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\field\flddirty{\*\fldinst {\f6\fs16\lang1033\langfe1033\langnp1033\insrsid3693937\charrsid16398371 HYPERLINK "http://www.ensembl.org/Homo_sapiens/helpview?se=1&kw=contigview#mus_musculus_match"}{\f6\fs16\lang1033\langfe1033\langnp1033\insrsid3693937\charrsid16398371 {\*\datafield 00d0c9ea79f9bace118c8200aa004ba90b020000000b000000e0c9ea79f9bace118c8200aa004ba90b8000000068007400740070003a002f002f007700770077002e0065006e00730065006d0062006c002e006f00720067002f0048006f006d006f005f00730061007000690065006e0073002f00680065006c00700076006900650077003f00730065003d00310026006b0077003d0063006f006e0074006900670076006900650077000000130000006d00750073005f006d0075007300630075006c00750073005f006d0061007400630068000000}}}{\fldrslt {\f6\fs16\cf1\lang1033\langfe1033\langnp1033\insrsid3693937\charrsid16398371 http://www.ensembl.org/Homo_sapiens/helpview?se=1&kw=contigview#mus_musculus_match}}}{\f6\fs16\lang1033\langfe1033\langnp1033\insrsid3693937\charrsid16398371 \par }\pard \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f5\insrsid3693937\charrsid16398371 \par The full range of comparisons available may be found in the method_link table as shown below.\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\insrsid3693937\charrsid16398371 \par }\pard\plain \s20\qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\fs16\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\insrsid3693937 mysql> select * from method_link;\par +----------------+----------------------+\par | method_link_id | type                 |\par +----------------+----------------------+\par |              1 | BLASTZ_NET           |\par |              2 | BLASTZ_NET_TIGHT     |\par |              3 | BLASTZ_RECIP_NET     |\par |              4 | PHUSION_BLASTN       |\par |              5 | PHUSION_BLASTN_TIGHT |\par |              6 | TRANSLATED_BLAT      |\par |              7 | BLASTZ_GROUP         |\par |              8 | BLASTZ_GROUP_TIGHT   |\par |            101 | SYNTENY              |\par |            201 | ENSEMBL_ORTHOLOGUES  |\par |            301 | FAMILY               |\par |            202 | ENSEMBL_PARALOGUES   |\par +----------------+----------------------+\par 12 rows in set (0.00 sec)\par }{\insrsid3693937\charrsid16398371 \par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid10292688 The designation \lquote TIGHT\rquote  denotes that the alignments have been rescored using the \lquote TIGHT\rquote  matrix (in cvs, ensembl-compara/scripts/hcr/tight.mat) so only the most highly conserved alignments are reported.\par \tab The whole genome comparisons can be accessed through the API by 2 different ways using of the 2 different adaptors. Specifically, the DnaAlignFeatureAdaptor, which returns DnaDnaAlignFeatures objects (only used for pairwise alignment) and the GenomicAlignBlockAdaptor, which returns GenomicAlignBlock objects (can be used for pairwise and also multiple alignments).\par \par }\pard \ql \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\b\f5\insrsid3693937\charrsid16398371 DnaDnaAlignFeature objects (for pairwise alignments only)\par }\pard \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f5\insrsid3693937\charrsid9047379 Below it is a simple commented perl script to illustrate the use of \par }\pard\plain \s20\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\fs16\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\insrsid3693937 \par use strict;\par use Bio::EnsEMBL::Registry;\par use Bio::EnsEMBL::Compara::DBSQL::DBAdaptor; \par use Bio::AlignIO;\par use Bio::LocatableSeq;\par use Getopt::Long;\par \par my $usage = "\par $0\par   [--help]                      this menu\par    --dbname string              (e.g. compara23) one of the compara database\par                                 Bio::EnsEMBL::Registry aliases\par    --seq_region string          (e.g. 22)\par    --seq_region_start integer   (e.g. 50000000)\par    --seq_region_end integer     (e.g. 50500000)\par    --qy string                  (e.g. human) the query species (i.e. a\par                                 Bio::EnsEMBL::Registry alias) from which alignments\par                                 are queried and seq_region refer to\par    --tg string                  (e.g. mouse) the target sepcies (i.e. a\par                                 Bio::EnsEMBL::Registry alias) to which alignments are\par                                 queried\par   [--alignment_type string]     (e.g. TRANSLATED_BLAT) type of alignment stored\par                                 (default: BLASTZ_NET)\par   [--tsl]                       print out a translated alignment\par   [--oo]                        By default, the alignments are dumped so that the --qy\par                                 species sequence is always on forward strand. --oo is\par                                 mostly useful in association with -tsl option, when a\par                                 full translated alignment program has been used e.g \par                                 TRANSLATED_BLAT, and allow to obtain the right \par                                 translation phase. So the --qy species sequence might\par                                 be reverse complemented.\par   [--ft string]                 alignment format, available in bioperl Bio::AlignIO\par                                 (default: clustalw)\par   [--uc]                        print out sequence in upper cases (default is lower\par                                 cases)\par   [--limit integer]             (e.g. 2) limit the output to the number of alignments\par                                 specified\par   [--reg_conf filepath]         the Bio::EnsEMBL::Registry configuration file. If none\par                                 given, the one set in ENSEMBL_REGISTRY will be used if\par                                 defined, if not ~/.ensembl_init will be used.\par \par \\n";\par \par my $dbname;\par my ($seq_region,$seq_region_start,$seq_region_end);\par my ($qy_species,$tg_species);\par my $help = 0;\par my $alignment_type = "BLASTZ_NET";\par my $limit;\par my $reg_conf;\par my $format = "clustalw";\par my $translated = 0;\par my $uc = 0;}{\insrsid3693937\charrsid9047379  }{\insrsid3693937 \par my $original_orientation = 0;\par \par unless (scalar @ARGV) \{\par   print $usage;\par   exit 0;\par \}\par \par GetOptions('help' => \\$help,\par \tab    'dbname=s' => \\$dbname,\par \tab    'seq_region=s' => \\$seq_region,\par \tab    'seq_region_start=i' => \\$seq_region_start,\par \tab    'seq_region_end=i' => \\$seq_region_end,\par \tab    'qy=s' => \\$qy_species,\par \tab    'tg=s' => \\$tg_species,\par \tab    'alignment_type=s' => \\$alignment_type,\par            'tsl' => \\$translated,\par            'ft=s' => \\$format,\par            'uc' => \\$uc,}{\insrsid3693937\charrsid9047379  }{\insrsid3693937 \par            'oo' => \\$original_orientation,\par            'limit=i' => \\$limit,\par            'reg_conf=s' => \\$reg_conf);\par \par $|=1;\par \par if ($help) \{\par   print $usage;\par   exit 0;\par \}\par \par }{\b\fs18\insrsid3693937\charrsid10292688 # Setting up Bio::EnsEMBL::Regitry\par # if $reg_conf is undef, ~/.ensembl_init will be loaded if it exists\par \par }{\insrsid3693937 Bio::EnsEMBL::Registry->load_all($reg_conf);\par \par $format = lc $format;\par \par }{\b\fs18\insrsid3693937\charrsid10292688 # Getting the core SliceAdaptor for the query species\par \par }{\insrsid3693937 my $qy_sa = Bio::EnsEMBL::Registry->get_adaptor($qy_species,'core','Slice');\par }{\b\fs18\insrsid3693937\charrsid10292688 \par # Fetching a Slice. In compara, all slices are \lquote toplevel\rquote  coordinate system.\par \par }{\insrsid3693937 my $qy_slice = $qy_sa->fetch_by_region('toplevel',$seq_region,\par                                        $seq_region_start,$seq_region_end);\par \par }{\b\fs18\insrsid3693937\charrsid10292688 # Getting the core MetaContainer adaptor for the target species\par \par }{\insrsid3693937 my $tg_mc = Bio::EnsEMBL::Registry->get_adaptor($tg_species,'core','MetaContainer');\par \par }{\b\fs18\insrsid3693937\charrsid10292688 # Getting a Bio::Species object and from it the Species genus (e.g. Mus\par # musculus) of the target species, using the binomial call\par \par }{\insrsid3693937 my $tg_binomial = $tg_mc->get_Species->binomial;\par \par }{\b\fs18\insrsid3693937\charrsid10292688 # Getting the compara DnaAlignFeatureAdaptor to query the compara database\par \par }{\insrsid3693937 my $dafad = Bio::EnsEMBL::Registry->get_adaptor($dbname,'compara','DnaAlignFeature');\par \par }{\b\fs18\insrsid3693937\charrsid10292688 # Fetching DnaDnaAlignFeatures object (these are core objects) using the\par # fetch_all_by_Slice. The 3rd argument that can specify the assembly version\par # can be undef. The compara API will find for you the default assembly for\par # the target species.\par \par }{\insrsid3693937 my $DnaDnaAlignFeatures = \par $dafad->fetch_all_by_Slice($qy_slice,$tg_binomial,undef,$alignment_type,$limit);\par \par }{\b\fs18\insrsid3693937\charrsid10292688 # Go through each alignment to print out in the requested format\par \par }{\insrsid3693937 foreach my $ddaf (sort \{$a->start <=> $b->start \par                           || $a->end <=> $b->end\} \par                   @\{$DnaDnaAlignFeatures\}) \{\par \par }{\b\fs18\insrsid3693937\charrsid10292688   # if the original alignment strand orientation is requested\par   # ($original_orientation is true) and effectively the alignment obtained\par   # is reverse complement from the originally obtained by the alignment\par   # program used (if $ddaf->strands_reversed is true), then reverse\par   # complement the alignment.\par }{\fs18\insrsid3693937\charrsid9047379 \par   if ($original_orientation && $ddaf->strands_reversed) \{\par     $ddaf->reverse_complement;\par   \}\par \par }{\insrsid3693937   }{\b\fs18\insrsid3693937\charrsid10292688 # Create a list of flags to be used in the get_SimpleAlign method call\par \par }{\insrsid3693937   my @flags;\par   push @flags, 'translated' if ($translated);\par   push @flags, 'uc' if ($uc);\par   \par }{\b\fs18\insrsid3693937\charrsid10292688   # Get a Bio::SimpleAlign from the DnaDnaAlignFeature object\par \par }{\insrsid3693937   my $sa = $ddaf->get_SimpleAlign(@flags);\par   \par }{\b\fs18\insrsid3693937\charrsid10292688   # Create a Bio::AlignIO with the requested output format\par \par }{\insrsid3693937   my $alignIO = Bio::AlignIO->newFh(-interleaved => 0,\par                                     -fh => \\*STDOUT,\par                                     -format => $format,\par                                     -idlength => 20);\par \par }{\b\fs18\insrsid3693937\charrsid10292688   # print out the alignment (Bio::SimpleAlign object) in the requested\par   # output format through the Bio::AlignIO handler\par \par }{\insrsid3693937   print $alignIO $sa;\par \}\par \par exit 0;\par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\insrsid3693937\charrsid16398371 \par }\pard\plain \s20\qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\fs16\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\fs20\insrsid3693937\charrsid10292688 So to pull out BLASTZ_NET_TIGHT alignments, let\rquote s say on part of ENCODE region ENm004 on human chromosome 22, between position 30184430 and position 30184485, against the mouse genome in clustalw format, we can use know the following command line,\par }\pard \s20\ql \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f5\fs20\insrsid3693937\charrsid10292688 \par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid10292688 \par }{\f6\fs16\insrsid3693937\charrsid10292688 % perl DumpAlignmentsLight.pl --dbname Compara23 --seq_region 22\par --seq_region_start 30184430 --seq_region_end 30184485 --qy human --tg mouse\par --alignment_type BLASTZ_NET_TIGHT\par \par CLUSTAL W(1.81) multiple sequence alignment\par \par \par 22/30184223-30184547   tgaaacgcttgtccttgaagtccctctctcggtctctgtctctcaagtcccgcaggtcct\par 11/3118113-3118437     tgaaacgtttgtccttgtagtccctctctctgtctcggtctctcaagtctcgcaggtcct\par                        ******* ********* ************ ***** ************ **********\par \par \par 22/30184223-30184547   tatcgctaagacggtgatccttctcaaaggtccgggcagagattatcctcccactgccaa\par 11/3118113-3118437     tatcactgagacggtgatccttttcaaaggcccgggcagaaattatccttccactgccaa\par                        **** ** ************** ******* ********* ******** **********\par \par \par 22/30184223-30184547   tcctacgtccaccaagcagacgaagcccatcactatctttctctaatggacttcctgagc\par 11/3118113-3118437     ttcttcgtccaccaagcaggcgaagtccatcactgtctttctccaatggactgccagatc\par                        * ** ************** ***** ******** ******** ******** ** ** *\par \par \par 22/30184223-30184547   gccgggagctaacagcggctgtcacgtggcagccccctccaaagctccgtctctgagggc\par 11/3118113-3118437     gtcgggagctaacagcagctgtcacatggcagccacctccaaagcttcgtctctgtgggc\par                        * ************** ******** ******** *********** ******** ****\par \par \par 22/30184223-30184547   tgagaacaacatctaagtcatcttctttcacacgctctcgtggatctggaaggacgtggg\par 11/3118113-3118437     tgagaacaacatctaagtcatcttctttcactcgctctcgtggatctgaaaagatgccag\par                        ******************************* **************** ** ** *   *\par \par \par 22/30184223-30184547   aaagacaaagttaaacaaaccaaca\par 11/3118113-3118437     aaagagaaaggtaagcaaaccaaca\par                        ***** **** *** **********\par }\pard \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f5\insrsid3693937\charrsid10292688 \par }\pard \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f5\insrsid3693937\charrsid10292688 Now on the same region, TRANSLATED_BLAT alignments against fugu in clustalw format, but at translation level now (-tsl) not nucleotide level, we can run the following command line,\par \par }\pard \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f6\fs16\insrsid3693937\charrsid10292688 % perl DumpAlignments.pl --dbname Compara26 --seq_region 22 \\\par --seq_region_start 30184430 --seq_region_end 30184485 --qy human --tg fugu \\\par --alignment_type TRANSLATED_BLAT --tsl\par \par CLUSTAL W(1.81) multiple sequence alignment\par \par \par 22/30184431-30184484    aapskapslraenni*vi\par scaffold_2267/1347-1400 tspskaaplwa*yyi*ii\par                         ::****..* *   **:*\par }\pard \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f5\insrsid3693937\charrsid10292688 \par By default, the alignments will dump with --qy species sequence on forward strand. To make sure that the alignment, you got is on the strand on which it was originally generated using the --oo option will check that and restore the right strandness. See below the difference in the translation level alignment obtained.\par \par }\pard \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f6\fs16\insrsid3693937\charrsid10292688 % perl DumpAlignments.pl --dbname Compara26 --seq_region 22 \\\par --seq_region_start 30184430 --seq_region_end 30184485 --qy human --tg fugu \\\par --alignment_type TRANSLATED_BLAT --tsl --oo\par \par CLUSTAL W(1.81) multiple sequence alignment\par \par \par 22/30184431-30184484    ddldvvlspqrrsfgggc\par scaffold_2267/1347-1400 ddldvilspqrrsfgggc\par                         *****:************\par }\pard \ql \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\insrsid3693937\charrsid16398371 \par }{\b\f5\insrsid3693937\charrsid16398371 GenomicAlignBlock objects (pairwise/multiple alignments)\par }\pard \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 {\f5\insrsid3693937\charrsid3693937 To be written.\par \par }\pard\plain \s4\qj \li0\ri0\sb240\sa60\sl360\slmult1\keepn\widctlpar\aspalpha\aspnum\faauto\outlinelevel3\adjustright\rin0\lin0\itap0\pararsid3693937 \b\fs28\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 Orthologues and Protein clusters\par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid10292688 NB : This following is very much a draft at this stage with some piece of code to give examples, but not much comments.\par \par }\pard \ql \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\b\f5\insrsid3693937\charrsid16398371 Member objects\par }\pard\plain \s20\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\fs16\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b\fs18\insrsid3693937\charrsid10292688 # get the MemberAdaptor\par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f6\fs16\insrsid3693937\charrsid16398371 my $ma = Bio::EnsEMBL::Registry->get_adaptor($dbname,\rquote compara\rquote ,\rquote Member\rquote );\par }\pard\plain \s20\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\fs16\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b\fs18\insrsid3693937\charrsid10292688 # fetch a Member\par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f6\fs16\insrsid3693937\charrsid9047379 my $member = $ma->fetch_by_source_stable_id(\lquote ENSEMBLGENE\rquote ,\rquote ENSG00000004059\rquote );\par }\pard\plain \s20\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\fs16\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b\fs18\insrsid3693937\charrsid10292688 # print out some information about the Member\par }\pard\plain \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f6\fs16\insrsid3693937\charrsid16398371 print join \ldblquote  \ldblquote , map \{ $member->$_ \} qw(chr_name chr_start chr_end description source_name taxon_id taxon),\rdblquote \\n\rdblquote ;\par }\pard \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f6\fs16\insrsid3693937\charrsid16398371 \par chr_name}{\f5\fs16\insrsid3693937\charrsid16398371 , }{\f6\fs16\insrsid3693937\charrsid16398371 chr_start}{\f5\fs16\insrsid3693937\charrsid16398371 , }{\f6\fs16\insrsid3693937\charrsid16398371 chr_}{\f5\fs16\insrsid3693937\charrsid16398371 end}{\f5\insrsid3693937\charrsid16398371  and }{\f6\fs16\insrsid3693937\charrsid16398371 description}{\f5\insrsid3693937\charrsid16398371  are self-explanatory.\par }{\f6\fs16\insrsid3693937\charrsid16398371 source_name}{\f5\insrsid3693937\charrsid16398371  tells about the origin of the Member entry, and  can be either \par }\pard \qj \fi720\li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f5\insrsid3693937\charrsid16398371 ENSEMBLPEP, derived from ensembl translation,\par or ENSEMBLGENE, derived from an ensembl gene,\par or SWISSPROT, derived from a Uniprot/Swissprot entry,\par or SPTREMBL, derived from a Uniprot/SP-TrEMBL entry.\par }\pard \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f6\fs16\insrsid3693937\charrsid16398371 taxon_id}{\f6\insrsid3693937\charrsid16398371  }{\f5\insrsid3693937\charrsid16398371 e.g. 9606 correspond to the NCBI taxonomy identifier (see }{\field{\*\fldinst {\f5\insrsid3693937\charrsid3693937  HYPERLINK "http://www.ncbi.nlm.nih.gov/Taxonomy/taxonomyhome.html/" }{\f5\insrsid3693937\charrsid9245693 {\*\datafield 00d0c9ea79f9bace118c8200aa004ba90b02000000170000003800000068007400740070003a002f002f007700770077002e006e006300620069002e006e006c006d002e006e00690068002e0067006f0076002f005400610078006f006e006f006d0079002f007400610078006f006e006f006d00790068006f006d0065002e00680074006d006c002f000000e0c9ea79f9bace118c8200aa004ba90b7000000068007400740070003a002f002f007700770077002e006e006300620069002e006e006c006d002e006e00690068002e0067006f0076002f005400610078006f006e006f006d0079002f007400610078006f006e006f006d00790068006f006d0065002e00680074006d006c002f000000}}}{\fldrslt {\cs15\f5\ul\cf2\insrsid3693937\charrsid9245693 http://www.ncbi.nlm.nih.gov/Taxonomy/taxonomyhome.html/}}}{\f5\insrsid3693937  }{\f5\insrsid3693937\charrsid16398371 for more details).\par }{\f5\fs16\insrsid3693937\charrsid16398371 taxon }{\f5\insrsid3693937\charrsid16398371 returns a Bio::EnsEMBL::Compara::Taxon object that inherits itself from Bio::Species, so from this object you can get additional information about the species.\par }\pard \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f6\fs16\insrsid3693937\charrsid16398371 my $taxon = $member->taxon;\par print join \ldblquote ; \ldblquote , map \{ $taxon->$_ \} qw(common_name genus species binomial classification),\rdblquote \\n\rdblquote ;\par }\pard \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f5\insrsid3693937\charrsid16398371 \par respectively for these method calls and in the case of human species, you will obtain\par }\pard \qj \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f6\fs16\insrsid3693937\charrsid16398371 human; Homo; sapiens; Homo sapiens; sapiens Homo Hominidae Catarrhini Primates Eutheria Mammalia Euteleostomi Vertebrata Craniata Chordata Metazoa Eukaryota\par }\pard \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f5\insrsid3693937\charrsid16398371 \tab  \par }\pard \ql \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\b\f5\insrsid3693937\charrsid16398371 Homology objects\par }{\f5\insrsid3693937\charrsid16398371 \par }\pard \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\b\f6\fs18\insrsid3693937\charrsid10292688 # first you have to get a Member object. In case of homology is a gene, in \par # case of family it can be a gene or a protein\par }{\f6\fs16\insrsid3693937\charrsid16398371 \par my $ma = Bio::EnsEMBL::Registry->get_adaptor($dbname,\rquote compara\rquote ,\rquote Member\rquote );\par my $member = $ma->fetch_by_source_stable_id(\lquote ENSEMBLGENE\rquote ,\rquote }{\f6\fs16\insrsid3693937\charrsid9047379 ENSG00000004059\rquote }{\f6\fs16\insrsid3693937\charrsid16398371 );\par \par }{\b\f6\fs18\insrsid3693937\charrsid10292688 # then you get the homologies where the member is involved\par }{\f6\fs16\insrsid3693937\charrsid16398371 \par my $ha = Bio::EnsEMBL::Registry->get_adaptor($dbname,\rquote compara\rquote ,\rquote Homology\rquote );\par my $homologies = $ha->fetch_by_Member($member);\par fetch_by_Member_Homology_source (fetch_by_Member_MethodLink)\par \par }{\b\f6\fs18\insrsid3693937\charrsid10292688 # That will return an array reference with all homologies (orthologues, and\par # in some cases paralogues) against other species.\par # Then for each homology, you get all the Members implicated\par }{\f6\fs16\insrsid3693937\charrsid16398371 \par foreach my $homology (@\{$homologies\}) \{\par }{\b\f6\fs18\insrsid3693937\charrsid10292688 # You will find different kind of description\par # UBRH, MBRH, MBRH, RHS, YoungParalogues\par }{\b\f6\fs18\insrsid3693937\charrsid3693937 # see ensembl-compara/docs/docs/schema_doc.html for more details\par }{\b\f6\fs18\insrsid3693937\charrsid10292688 \par }{\f6\fs16\insrsid3693937\charrsid16398371 print $homology->description,\rdblquote  \rdblquote ,}{\f6\fs16\insrsid3693937\charrsid3693937  }{\f6\fs16\insrsid3693937\charrsid16398371 $homology->subtype,\rdblquote \\n\rdblquote ;\par }{\b\f6\fs18\insrsid3693937\charrsid10292688 \par # And if they are defined dN and dS related values\par \par }{\f6\fs16\insrsid3693937\charrsid16398371 print join \ldblquote  \ldblquote , map \{ $homology->$_ \} qw(dn ds n s lnl threshold_on_ds),\rdblquote \\n\rdblquote ;\par \par }{\b\f6\fs18\insrsid3693937\charrsid10292688 # each homology relation have only 2 members, you should find there\par # the initial member used in the first fetching\par }{\f6\fs16\insrsid3693937\charrsid16398371 \par for each my $member_attribute (@\{$homology->get_all_Member_Attribute\})\par \par }{\b\f6\fs18\insrsid3693937\charrsid10292688 # for each Member, you get information on the Member specifically and in \par # relation to the homology relation via Attribute object\par }{\f6\fs16\insrsid3693937\charrsid16398371 \par     my ($member, $attribute) = @\{$member_attribute\};\par     print join \ldblquote  \ldblquote , map \{ $member->$_ \}  qw(stable_id taxon_id),"\\n";\par     print join \ldblquote  \ldblquote , map \{ $attribute->$_ \} qw(perc_id perc_pos perc_cov),"\\n";\par \par   \}\par \par }{\b\f6\fs18\insrsid3693937\charrsid10292688 # You can even retrieve the HSP alignment between the 2 proteins, \par # HSP used to build the homology releationship at the peptide level\par \par }{\f6\fs16\insrsid3693937\charrsid16398371   my $sa = $homology->get_SimpleAlign();\par   my $alignIO = Bio::AlignIO->newFh(-interleaved => 0,\par                                     -fh => \\*STDOUT,\par                                     -format => "clustalw",\par                                     -idlength => 20);\par \par }\pard\plain \s19\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\fs16\insrsid3693937\charrsid16398371   print $alignIO $sa;}{\fs16\dbch\f15\insrsid3693937\charrsid16398371 \hich\af6\dbch\af15\loch\f6  \par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\b\f6\fs18\insrsid3693937\charrsid10292688 \par # or at the nucleotide level. You will need to make you have a connection to # the corresponding core databases through the Bio::EnsEMBL::Registry\par }\pard\plain \s19\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\fs16\dbch\f15\insrsid3693937\charrsid16398371 \par \hich\af6\dbch\af15\loch\f6   $sa = $homology->get_\hich\af6\dbch\af15\loch\f6 SimpleAlign(\lquote cdna\rquote );\par \hich\af6\dbch\af15\loch\f6   my $alignIO = Bio::AlignIO->newFh(-interleaved => 0,\par \hich\af6\dbch\af15\loch\f6                                     -fh => \\*STDOUT,\par \hich\af6\dbch\af15\loch\f6                                     -format => "phylip",\par \hich\af6\dbch\af15\loch\f6                                     -idlength => 20);\par \par \hich\af6\dbch\af15\loch\f6   print $alignI\hich\af6\dbch\af15\loch\f6 O $sa;\par }\pard\plain \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f6\fs16\insrsid3693937\charrsid16398371 \par \}\par }\pard \ql \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f5\insrsid3693937\charrsid16398371 \par }{\b\f5\insrsid3693937\charrsid16398371 Family objects\par }{\f6\fs16\insrsid3693937\charrsid16398371 \par }\pard \ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 {\f6\fs16\insrsid3693937\charrsid16398371 my $ma = Bio::EnsEMBL::Registry->get_adaptor($dbname,\rquote compara\rquote ,\rquote Member\rquote );\par my $member = $ma->fetch_by_source_stable_id(\lquote ENSEMBLGENE\rquote ,\rquote }{\f6\fs16\insrsid3693937\charrsid9047379 ENSG00000004059\rquote }{\f6\fs16\insrsid3693937\charrsid16398371 );\par }\pard\plain \s19\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid3693937 \f6\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\fs16\dbch\f15\insrsid3693937\charrsid16398371 \par \hich\af6\dbch\af15\loch\f6 my $fa = Bio::EnsEMBL::Registry->get_adaptor($dbname,\rquote compara\rquote ,\rquote Family\rquote );\par \hich\af6\dbch\af15\loch\f6 my\hich\af6\dbch\af15\loch\f6  $families = $fa->fetch_by_Member($member);\par \par \hich\af6\dbch\af15\loch\f6 foreach my $family (@\{$families\}) \{\par \hich\af6\dbch\af15\loch\f6  print $family->description;\par \par \hich\af6\dbch\af15\loch\f6  for each my $member_attribute (@\{$family->get_all_Member_Attribute\})\par \hich\af6\dbch\af15\loch\f6     my ($member, $attribute) = @\{$member_attribute\};\par \hich\af6\dbch\af15\loch\f6     print $member->sta\hich\af6\dbch\af15\loch\f6 ble_id," ",$member->taxon_id,"\\n";\par \hich\af6\dbch\af15\loch\f6  \}\par \par \hich\af6\dbch\af15\loch\f6   my $sa = $family->get_SimpleAlign();\par \hich\af6\dbch\af15\loch\f6   my $alignIO = Bio::AlignIO->newFh(-interleaved => 0,\par \hich\af6\dbch\af15\loch\f6                                     -fh => \\*STDOUT,\par \hich\af6\dbch\af15\loch\f6                                     -format => "phylip",\par \hich\af6\dbch\af15\loch\f6              \hich\af6\dbch\af15\loch\f6                        -idlength => 20);\par \par \hich\af6\dbch\af15\loch\f6   print $alignIO $sa;\par \par \hich\af6\dbch\af15\loch\f6   $sa = $family->get_SimpleAlign(\lquote cdna\rquote );\par \hich\af6\dbch\af15\loch\f6   my $alignIO = Bio::AlignIO->newFh(-interleaved => 0,\par \hich\af6\dbch\af15\loch\f6                                     -fh => \\*STDOUT,\par \hich\af6\dbch\af15\loch\f6                                     -form\hich\af6\dbch\af15\loch\f6 at => "phylip",\par \hich\af6\dbch\af15\loch\f6                                     -idlength => 20);\par \par \hich\af6\dbch\af15\loch\f6   print $alignIO $sa;\par \}\par }\pard\plain \qj \li0\ri0\sl360\slmult1\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 {\f5\insrsid3693937\charrsid16398371 \par }}