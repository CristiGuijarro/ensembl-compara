{\rtf1\ansi\deff0\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Timmons{\*\falt Times New Roman};}{\f1\froman\fprq2\fcharset0 Timmons{\*\falt Times New Roman};}{\f2\fswiss\fprq2\fcharset0 Helvetica;}{\f3\fswiss\fprq2\fcharset0 Helmet{\*\falt Arial};}{\f4\froman\fprq2\fcharset2 Symbol;}{\f5\fnil\fprq0\fcharset2 StarSymbol;}{\f6\fnil\fprq0\fcharset2 StarSymbol{\*\falt Arial Unicode MS};}{\f7\fmodern\fprq0\fcharset0 Courier{\*\falt Courier New};}{\f8\fswiss\fprq2\fcharset0 Helmet{\*\falt Arial};}{\f9\fmodern\fprq0\fcharset0 Courier New;}{\f10\fnil\fprq2\fcharset0 FreeMono{\*\falt Times New Roman};}{\f11\fmodern\fprq1\fcharset0 Courier;}{\f12\fnil\fprq0\fcharset0 Courier New;}{\f13\fnil\fprq2\fcharset0 Helmet{\*\falt Arial};}{\f14\froman\fprq2\fcharset0 Times;}{\f15\fnil\fprq2\fcharset0 HG Mincho Light J{\*\falt MS Mincho};}{\f16\fnil\fprq2\fcharset0 HG Mincho Light J{\*\falt MS Mincho};}{\f17\froman\fprq2\fcharset0 Times New Roman;}{\f18\fnil\fprq2\fcharset0 \u65325 ?\u65331 ? \u26126 ?\u26397 ?;}{\f19\fnil\fprq2\fcharset0 Tahoma{\*\falt Lucidasans};}{\f20\fnil\fprq0\fcharset0 Tahoma{\*\falt Lucidasans};}{\f21\fswiss\fprq2\fcharset0 Tahoma;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red128\green0\blue128;\red0\green128\blue0;\red184\green71\blue0;\red255\green0\blue0;\red255\green255\blue0;\red128\green128\blue128;}
{\stylesheet{\s1\sa144\sl100\slmult0\qj\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057\snext1 Default;}
{\s2\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs20\langfe255\loch\f7\fs20\lang1033\sbasedon1\snext2 Text body;}
{\s3\li283\ri0\lin283\rin0\fi-283\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f0\fs24\lang1033\sbasedon1\snext3 List;}
{\s4\sb120\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af20\afs20\lang255\ai\ltrch\dbch\af13\afs20\langfe255\ai\loch\f0\fs20\lang1033\i\sbasedon1\snext4 Caption;}
{\s5\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af20\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f0\fs24\lang1033\sbasedon1\snext5 Index;}
{\s6\sb240\sa120\keepn\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\afs28\lang255\ltrch\dbch\af15\afs28\langfe255\loch\f3\fs28\lang1033\sbasedon1\snext2 Heading;}
{\s7\sb240\sa60\keepn\scaps\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs44\langfe255\ab\loch\f0\fs44\lang1033\b\sbasedon1\snext1 Heading 1;}
{\s8\sb240\sa60\keepn\scaps\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs36\langfe255\ab\loch\f0\fs36\lang1033\b\sbasedon1\snext1{\*\soutlvl1} Heading 2;}
{\s9\sb240\sa60\keepn\scaps\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs28\langfe255\ab\loch\f0\fs28\lang1033\b\sbasedon1\snext1 Heading 3;}
{\s10\sb240\sa60\keepn\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs28\langfe255\ab\loch\f2\fs28\lang1033\b\sbasedon1\snext1{\*\soutlvl3} Heading 4;}
{\s11\sb144\sa144\keepn\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\ab\loch\f0\fs24\lang1033\b\sbasedon1\snext1 Heading 5;}
{\s12\li283\ri0\lin283\rin0\fi0\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f0\fs24\lang1033\sbasedon1\snext12 Text body indent;}
{\s13\sb240\sa120\keepn\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af21\afs28\lang255\ltrch\dbch\af16\afs28\langfe255\loch\f8\fs28\lang1033\sbasedon1\snext2 WW-Heading;}
{\s14\sb120\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af21\afs20\lang255\ai\ltrch\dbch\af13\afs20\langfe255\ai\loch\f0\fs20\lang1033\i\sbasedon1\snext14 WW-Caption;}
{\s15\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af21\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f0\fs24\lang1033\sbasedon1\snext15 WW-Index;}
{\s16\li283\ri0\lin283\rin0\fi0\sa120\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f0\fs24\lang1033\sbasedon1\snext16 WW-List Continue;}
{\s17\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af17\afs24\langfe255\loch\f7\fs24\lang1033\sbasedon1\snext17 WW-Plain Text;}
{\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033\sbasedon1\snext18 code;}
{\s19\cf4{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f0\fs24\lang1033\sbasedon1\snext19 Notes to self;}
{\s20\li566\ri0\lin566\rin0\fi-283\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f0\fs24\lang1033\sbasedon1\snext20 WW-List 2;}
{\s21\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f0\fs24\lang1033\sbasedon1\snext21 WW-List Bullet 2;}
{\s22\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f0\fs24\lang1033\sbasedon2\snext22 Byline;}
{\s23\sa283\brdrb\brdrdb\brdrw15\brdrcf8\brsp0{\*\brdrb\brdlncol8\brdlnin1\brdlnout1\brdlndist20}\brsp0\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs12\lang255\ltrch\dbch\af13\afs12\langfe255\loch\f0\fs12\lang1033\sbasedon1\snext2 Horizontal Line;}
{\s24\sa283\brdrb\brdrdb\brdrw15\brdrcf8\brsp0{\*\brdrb\brdlncol8\brdlnin1\brdlnout1\brdlndist20}\brsp0\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs12\lang255\ltrch\dbch\af13\afs12\langfe255\loch\f0\fs12\lang1033\sbasedon1\snext2 WW-Horizontal Line;}
{\s25\cf0\qc{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs36\lang255\ab\ltrch\dbch\af13\afs36\langfe255\ab\loch\f0\fs36\lang1033\b\sbasedon13\snext26 Title;}
{\s26\cf0\qc{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs28\lang255\ai\ltrch\dbch\af13\afs28\langfe255\ai\loch\f0\fs28\lang1033\i\sbasedon13\snext2 Subtitle;}
{\*\cs28\cf0\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f0\fs24\lang1033 WW-Fuente de p\'e1rrafo predeter.;}
{\*\cs29\cf0\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f0\fs24\lang1033 WW-Default Paragraph Font;}
{\*\cs30\cf2\ul\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f0\fs24\lang1033\sbasedon29 Internet Link;}
{\*\cs31\cf3\ul\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f0\fs24\lang1033\sbasedon29 Visited Internet Link;}
{\*\cs32\cf0\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f4\fs24\lang1033 WW8Num1z0;}
{\*\cs33\cf0\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\loch\f4\fs24\lang1033 WW8Num2z0;}
{\*\cs34\cf0\rtlch\af5\afs18\lang255\ltrch\dbch\af5\afs18\langfe255\loch\f5\fs18\lang1033 Bullets;}
{\*\cs35\cf0\rtlch\af6\afs18\lang255\ltrch\dbch\af6\afs18\langfe255\loch\f6\fs18\lang1033 WW-Bullets;}
}
{\info{\title ENSEMBL COMPARA PERL API TUTORIAL}{\author Abel URETA-VIDAL}{\creatim\yr2004\mo11\dy9\hr0\min23}{\revtim\yr2004\mo11\dy9\hr0\min39}{\printim\yr1601\mo1\dy1\hr0\min0}{\comment StarWriter}{\vern6450}}\deftab720
{\*\pgdsctbl
{\pgdsc0\pgdscuse195\pgwsxn11899\pghsxn16837\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\pgdscnxt0 Default;}}
{\*\pgdscno0}\paperh16837\paperw11899\margl1800\margr1800\margt1440\margb1440\sectd\sbknone\pgwsxn11899\pghsxn16837\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pard\plain \ltrpar\s25\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs36\lang255\ab\ltrch\dbch\af13\afs36\langfe255\loch\f2\fs36\lang1033 {\loch\f2\fs36\lang1033\i0\b0 EnsEMBL Compara Perl API Tutorial}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 By Cara Woodwark, Abel Ureta-Vidal and Javier Herrero}
\par {\loch\f2\fs20\lang2057\i0\b0 Revisions: CW Jun 04, AUV Aug 04, Nov 04, JH Nov 04}
\par {\loch\f2\fs20\lang2057\i0\b0 WARNING: this is a \lquote test\rquote  version. By now this tutorial is \lquote warranty\rquote  work with branch-ensembl-26, and with ensembl databases release 26. As it is a \lquote test\rquote  version, you may find errors. Please email {\field{\*\fldinst HYPERLINK "mailto:ensembl-dev@ebi.ac.uk" }{\fldrslt \*\cs30\cf2\ul\rtlch\ltrch\dbch\loch\f0\fs24\lang1033{\*\cs30\cf2\ul\rtlch\ltrch\dbch\loch\f0\fs24\lang1033 ensembl-dev@ebi.ac.uk}}}, so that we can correct them. We wi
ll be extending/completing this tutorial in the near future.}
\par \pard\plain \sb240\sa60\keepn\f2\fs28\lang2057\b\f14\fs28\b\f14\fs20\sl100\slmult0\qj \ltrpar\s10\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa60\keepn\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs28\langfe255\ab\loch\f2\fs28\lang1033\b {\loch\f2\fs28\lang2057\i0\b Introduction}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 This tutorial is an introduction to the ensembl compara API. A knowledge of the ensembl core API is presumed, it is assumed that concepts and conventions presented in the ensembl core API tutorial have been assimilated by the user. The ensembl core API tut
orial can be found at {\cf1 http://www.ensembl.org/Docs/linked_docs/ensembl_tutorial.pdf} (in cvs, in ensembl/docs/tutorial/ensembl_tutorial.pdf) and should be read first as it provides a comprehensive guide to the ensembl environment. }
\par {\loch\f2\fs20\lang2057\i0\b0 A documentation about the compara database schema is available {\field{\*\fldinst HYPERLINK "http://www.ensembl.org/" }{\fldrslt \*\cs30\cf2\ul\rtlch\ltrch\dbch\loch\f0\fs24\lang1033{\*\cs30\cf2\ul\rtlch\ltrch\dbch\loch\f0\fs24\lang1033 http://www.ensembl.org/}}}???? (in cvs ensembl-compara/docs/docs/schema_doc.html){\chcbpat7 ,} and while not necessary for this tutorial, an understanding of the database tables may help, as many of the Adapt
or modules are table specific.}
\par \pard\plain \sb240\sa60\keepn\f2\fs28\lang2057\b\f14\fs28\b\f14\fs20\sl100\slmult0\qj \ltrpar\s10\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa60\keepn\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs28\langfe255\ab\loch\f2\fs28\lang1033\b {\loch\f2\fs28\lang2057\i0\b Obtaining the code}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 To use the ensembl compara API, you have the same requirement that when using the ensembl core API i.e. perl 5.6 or later, bioperl 1.2 or later, DBI, DBD::mysql and ensembl core code. Please refer to the ensembl core API tutorial that will tell you everyth
ing about these modules, how and where to get them.}
\par {\loch\f2\fs20\lang2057\i0\b0 You may start by creating a directory for storing the API in your home directory:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 cd}
\par {\loch\f9\fs16\lang2057\i0\b0 mkdir src}
\par {\loch\f9\fs16\lang2057\i0\b0 mv src}
\par 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 In addition, you will need the ensembl compara code that is available by cvs from the ensembl cvs repository using the following cvs commands:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1036 {\loch\f9\fs16\lang1036\i0\b0 cvs \endash d :pserver:cvsuser@cvsro.sanger.ac.uk:/cvsroot/ensembl login}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f2\fs16\lang1036 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 When prompted the password is \lquote CVS\rquote .}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 cvs \endash d :pserver:cvsuser@cvsro.sanger.ac.uk:/cvsroot/ensembl co \endash r branch-ensembl-26 ensembl-compara}
\par 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 This will check out ensembl-compara code for stable branch 26. Make sure the ensembl core code you have already checked out is on the same branch. Note that the branch that is checked out should correspond to the database version being used. Thus ensembl_c
ompara_26_1 and e.g. homo-sapiens_core_26_35 and mus_musculus_core_26_33b should be used with the above ensembl branch 26 code.}
\par \pard\plain \sb240\sa60\keepn\f2\fs28\lang2057\b\f14\fs28\b\f14\fs20\sl100\slmult0\qj \ltrpar\s10\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa60\keepn\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs28\langfe255\ab\loch\f2\fs28\lang1033\b {\loch\f2\fs28\lang2057\i0\b Environment Variables}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 The following PERL5LIB environment variables should be set up:}
\par {\loch\f2\fs20\lang2057\i0\b0 - under tcsh/csh shell with}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 setenv PERL5LIB $\{PERL5LIB\}:\{HOME\}/src/bioperl-live: \\}
\par {\loch\f9\fs16\lang2057\i0\b0 $\{HOME\}/src/ensembl/modules:$\{HOME\}/src/ensembl-compara/modules}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f2\fs16\lang1033 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 - under bash shell with}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 export PERL5LIB=$\{PERL5LIB\}:\{HOME\}/src/bioperl-live: \\}
\par {\loch\f9\fs16\lang2057\i0\b0 $\{HOME\}/src/ensembl/modules:$\{HOME\}/src/ensembl-compara/modules}
\par 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 These presume that bioperl and ensembl are in a directory called src set up in your home directory.}
\par \pard\plain \sb240\sa60\keepn\f2\fs28\lang2057\b\f14\fs28\b\f14\fs20\sl100\slmult0\qj \ltrpar\s10\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa60\keepn\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs28\langfe255\ab\loch\f2\fs28\lang1033\b {\loch\f2\fs28\lang2057\i0\b Code Conventions (and unconventions)}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 Refer to the ensembl core tutorial for a good description of the coding conventions normally used in ensembl. Due to historical accidents, there may be exceptions to these rules in compara.}
\par \pard\plain \sb240\sa60\keepn\f2\fs28\lang2057\b\f14\fs28\b\f14\fs20\sl100\slmult0\qj \ltrpar\s10\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa60\keepn\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs28\langfe255\ab\loch\f2\fs28\lang1033\b {\loch\f2\fs28\lang2057\i0\b Connecting a ensembl compara database}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 There are two ways to connect to the EnsEMBL Compara database. The old way uses the {\f9 Bio::EnsEMBL::Compara::DBSQL::DBAdaptor} explicitely. The new one uses the  {\f9 Bio::EnsEMBL::Registry }module which can read either a global or a specific configuration file.}
\par \pard\plain \ltrpar\s11\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb144\sa144\keepn\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\ab\loch\f0\fs24\lang1033\b {\loch\f2\fs24\lang2057\i0\b Explicitely, using the {\f9 Bio::EnsEMBL::Compara::DBSQL::DBAdaptor}}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 Ensembl compara data as ensembl core data, is stored in a MySQL relational database. If you want to access a compara database, you will need to connect to it. This is done in exactly the same way as when connecting an ensembl core database, but using a Com
para specific DBAdaptor.}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang3082 {\loch\f9\fs16\lang3082\i0\b0 use Bio::EnsEMBL::Compara::DBSQL::DBAdaptor}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 my $host = \lquote ensembldb.ensembl.org\rquote ;}
\par {\loch\f9\fs16\lang2057\i0\b0 my $user = \lquote anonymous\rquote ;}
\par {\loch\f9\fs16\lang2057\i0\b0 my $dbname = \lquote ensembl_compara_26_1\rquote ;}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 my $comparadb= new Bio::EnsEMBL::Compara::DBSQL::DBAdaptor (-host\tab => $host,}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab \tab \tab \tab \tab \tab \tab \tab -user\tab => $user,}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab \tab \tab \tab \tab \tab \tab \tab -dbname => $dbname);}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 As for a ensembl core connection, in addition to the parameters provided above, the optional {\f9 port}, {\f9 driver}{\f10  }and {\f9 pass}{\f10  }parameters can also be used to specify the TCP connection port, the type of database driver and the password respectively. These values have 
sensible defaults and can often be omitted.}
\par \pard\plain \ltrpar\s11\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb144\sa144\keepn\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\ab\loch\f0\fs24\lang1033\b{\loch\f2\fs24\lang2057\i0\b Implicitely, using the {\f9 Bio::EnsEMBL::Registry}{\f10  }configuration file (recommended)}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 You will need to have a registry configuration file set up. By default,  it takes the file defined by the ENSEMBL_REGISTRY environment variable or the file named {\f9 .ensembl_init} in your home directory if the former is not found. Additionally, it is possible 
to use a specific file (see {\f9 perldoc Bio::EnsEMBL::Registry} or later in this document for some examples on how to use a different file). An example of such file can be found in {\f9 ensembl/modules/Bio/EnsEMBL/Utils/ensembl_init.example}, and below you have a sli
ghtly modified copy of it.}
\par \pard\plain \ltrpar\s24\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa283\brdrb\brdrdb\brdrw15\brdrcf8\brsp0{\*\brdrb\brdlncol8\brdlnin1\brdlnout1\brdlndist20}\brsp0\rtlch\af19\afs12\lang255\ltrch\dbch\af13\afs12\langfe255\loch\f0\fs12\lang1033 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ltrch\dbch\af13\afs18\langfe255\loch\f9\fs18\lang1033 {\loch\f9\fs18\lang2057\i0\b0 # Example of configuration file used by Bio::EnsEMBL::Registry::load_all}
\par {\loch\f9\fs18\lang2057\i0\b0 # method to store/register all kind of Adaptors.}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b use strict}}{\loch\f9\fs16\lang2057;}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b use}}{\loch\f9\fs16\lang2057 Bio::EnsEMBL::Utils::ConfigRegistry;}
\par {\loch\f9\fs16\lang3082\i0\b\lang3082{\b use}}{\loch\f9\fs16\lang3082\lang3082 Bio::EnsEMBL::DBSQL::DBAdaptor;}
\par {\loch\f9\fs16\lang3082\i0\b\lang3082{\b use}}{\loch\f9\fs16\lang3082\lang3082 Bio::EnsEMBL::Compara::DBSQL::DBAdaptor;}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang3082 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 @aliases};}
\par  
\par {\loch\f9\fs16\lang2057\i0\b{\b new}}{\loch\f9\fs16\lang2057 Bio::EnsEMBL::DBSQL::DBAdaptor(-host => '{\cf4 ensembldb.ensembl.org}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                    -user => '{\cf4 anonymous}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                    -port => {\b\cf2 3306},}
\par {\loch\f9\fs16\lang2057\i0\b0                                    -species => '{\cf4 Homo sapiens}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                    -group => '{\cf4 core}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                    {\lang3082 -dbname => '{\cf4 homo_sapiens_core_26_35}');}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang3082 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang3082\i0\b0\lang3082{\cf2 @aliases}}{\loch\f9\fs16\lang3082\lang3082 = ('{\cf4 H_Sapiens}', '{\cf4 homo sapiens}', '{\cf4 Homo_Sapiens}','{\cf4 Homo_sapiens}', '{\cf4 Homo}', '{\cf4 homo}', '{\cf4 human}');}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang3082 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang3082\i0\b0\lang3082 Bio::EnsEMBL::Utils::ConfigRegistry->add_alias(-species => "{\cf4 Homo sapiens}",}
\par {\loch\f9\fs16\lang3082\i0\b0\lang3082                                                -alias => {\b \\}{\cf2 @aliases});}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang3082 
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang3082\i0\b\lang3082{\b new}}{\loch\f9\fs16\lang3082\lang3082 Bio::EnsEMBL::DBSQL::DBAdaptor(-host => '{\cf4 ensembldb.ensembl.org}',}
\par {\loch\f9\fs16\lang3082\i0\b0{\lang3082                                    }}{\loch\f9\fs16\lang2057-user => '{\cf4 anonymous}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                    -port => {\b\cf2 3306},}
\par {\loch\f9\fs16\lang2057\i0\b0                                    -species => '{\cf4 Mus musculus}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                    -group => '{\cf4 core}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                    -dbname => '{\cf4 mus_musculus_core_26_33b}');}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0{\cf2 @aliases}}{\loch\f9\fs16\lang2057 = ('{\cf4 M_Musculus}', '{\cf4 mus musculus}', '{\cf4 Mus_Musculus'},'{\cf4 Mus_musculus}', '{\cf4 Mus}', '{\cf4 mus}', '{\cf4 mouse}');}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 Bio::EnsEMBL::Utils::ConfigRegistry->add_alias(-species => "{\cf4 Mus musculus}",}
\par {\loch\f9\fs16\lang2057\i0\b0                                                -alias => {\b \\}{\cf2 @aliases});}
\par 
\par {\loch\f9\fs16\lang2057\i0\b{\b new}}{\loch\f9\fs16\lang2057 Bio::EnsEMBL::DBSQL::DBAdaptor(-host => '{\cf4 ensembldb.ensembl.org}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                    -user => '{\cf4 anonymous}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                    -port => {\b\cf2 3306},}
\par {\loch\f9\fs16\lang2057\i0\b0                                    -species => '{\cf4 Fugu rubripes}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                    -group => '{\cf4 core}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                    -dbname => '{\cf4 fugu_rubripes_core_26_2c}');}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0{\cf2 @aliases}}{\loch\f9\fs16\lang2057 = ('{\cf4 F_Rubripes}', '{\cf4 fugu rubripes}', '{\cf4 Fugu_Rubripes}','{\cf4 Fugu_rubripes}', '{\cf4 Fugu}', 'fugu');}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 Bio::EnsEMBL::Utils::ConfigRegistry->add_alias(-species => "{\cf4 Fugu rubripes}",}
\par {\loch\f9\fs16\lang2057\i0\b0                                                -alias => {\b \\}{\cf2 @aliases});}
\par 
\par {\loch\f9\fs16\lang2057\i0\b{\b new}}{\loch\f9\fs16\lang2057 Bio::EnsEMBL::Compara::DBSQL::DBAdaptor(-host => '{\cf4 ensembldb.ensembl.org}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                             -user => '{\cf4 anonymous}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                             -port => {\b\cf2 3306},}
\par {\loch\f9\fs16\lang2057\i0\b0                                             -species => '{\cf4 Compara26}',}
\par {\loch\f9\fs16\lang2057\i0\b0                                             -dbname => '{\cf4 ensembl_compara_26_1}');}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0{\cf2 @aliases}}{\loch\f9\fs16\lang2057 = ('{\cf4 ensembl_compara_26_1}', '{\cf4 compara26}');}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 Bio::EnsEMBL::Utils::ConfigRegistry->add_alias(-species => "{\cf4 Compara26}",}
\par {\loch\f9\fs16\lang2057\i0\b0                                                -alias => {\b \\}{\cf2 @aliases});}
\par 
\par {\loch\f9\fs16\lang2057\i0\b{\b\cf2 1}}{\loch\f9\fs16\lang2057;}
\par \pard\plain \ltrpar\s24\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa283\brdrb\brdrdb\brdrw15\brdrcf8\brsp0{\*\brdrb\brdlncol8\brdlnin1\brdlnout1\brdlndist20}\brsp0\rtlch\af19\afs12\lang255\ltrch\dbch\af13\afs12\langfe255\loch\f0\fs12\lang1033 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 In this configuration file, you can list all the parameters needed to connect a compara database. The compara database is a multi-species database that contains comparative genomic information on all ensembl species. One should then be able not only to con
nect to a compara database but also to every species ensembl core database. The use of the registry configuration file lets you the freedom to list connection parameters for all ensembl core databases you might need to access in relation to ensembl compara
 data (in our example, only 3 are mentioned, human, mouse and fugu). All this information is then in a single central place, easy to maintain (modify and update).}
\par {\loch\f2\fs20\lang2057\i0\b0 The access to database adaptor is done using either the main species alias (specified by the {\f9 -species} parameter) or one of the aliases specified (in the {\f9 @aliases} array). No need to remember the complete database name, one of the aliases will be enough.}
\par {\loch\f2\fs20\lang2057\i0\b0 WARNING: In previous version of this tutorial, an additional parameter {\f9 disconnect_when_inactive => 1} was specified for all ensembl core databases. It is not needed anymore, as there is now a lazy connection in place i.e. connection will be established only
 at your first {\f9 prepare}{\f10  }statement and kept alive until you use a {\f9 disconnect_if_idle }(or a more drastic {\f9 disconnect}). If you want to use {\f9 disconnect_when_inactive} make sure you know what you are doing.}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs20\langfe255\loch\f2\fs20\lang1033 {\loch\f2\fs20\lang2057\i0\b0 Below is a non exhaustive list of ensembl compara adaptors that are most often used}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 GenomeDBAdaptor\tab \tab {\fs20\f2 to fetch} Bio::EnsEMBL::Compara::GenomeDB {\fs20\f2 objects}}
\par {\loch\f9\fs16\lang2057\i0\b0 DnaFragAdaptor\tab \tab \tab {\fs20\f2 to fetch} Bio::EnsEMBL::Compara::DnaFrag {\fs20\f2 objects}}
\par {\loch\f9\fs16\lang2057\i0\b0 GenomicAlignBlockAdaptor\tab {\fs20\f2 to fetch} Bio::EnsEMBL::Compara::GenomicAlignBlock {\fs20\f2 objects}}
\par {\loch\f9\fs16\lang2057\i0\b0 DnaAlignFeatureAdaptor\tab {\fs20\f2 to fetch} Bio::EnsEMBL::DnaDnaAlignFeature {\fs20\f2 objects }}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\li2160\ri0\lin2160\rin0\fi720\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs20\langfe255\loch\f2\fs20\lang1033 {\loch\f2\fs20\lang2057\i0\b0 (note that this adaptor return a ensembl core object)}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 SyntenyAdaptor\tab \tab \tab {\fs20\f2 to fetch} Bio::EnsEMBL::Compara::SyntenyRegion {\fs20\f2 objects}}
\par {\loch\f9\fs16\lang2057\i0\b0 MemberAdaptor\tab \tab \tab {\fs20\f2 to fetch} Bio::EnsEMBL::Compara::Member {\fs20\f2 objects} }
\par {\loch\f9\fs16\lang2057\i0\b0 HomologyAdaptor\tab \tab {\fs20\f2 to fetch} Bio::EnsEMBL::Compara::Homology {\fs20\f2 objects}}
\par {\loch\f9\fs16\lang2057\i0\b0 FamilyAdaptor\tab \tab \tab {\fs20\f2 to fetch} Bio::EnsEMBL::Compara::Family {\fs20\f2 objects}}
\par {\loch\f9\fs16\lang2057\i0\b0 PeptideAlignFeatureAdaptor\tab {\fs20\f2 to fetch} Bio::EnsEMBL::Compara::PeptideAlignFeature}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\li2160\ri0\lin2160\rin0\fi720\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs20\langfe255\loch\f2\fs20\lang1033 {\loch\f2\fs20\lang2057\i0\b0 objects}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f2\fs16\lang1033 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 Only some of these adaptors will be used for illustration as part of this tutorial through commented perl scripts code.}
\par \pard\plain \sb240\sa60\keepn\f2\fs28\lang2057\b\f14\fs28\b\f14\fs20\sl100\slmult0\qj \ltrpar\s10\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa60\keepn\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs28\langfe255\ab\loch\f2\fs28\lang1033\b {\loch\f2\fs28\lang2057\i0\b Whole Genome Alignments}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 The compara database contains a number of different types of whole genome alignments. A listing about what are these different types can be found in the {\lang1033 ensembl-compara/docs/schema_doc.html document in method_link section.}}
\par {\loch\f2\fs20\lang2057\i0\b0 The whole genome comparisons can be accessed through the API by 2 different ways using of the 2 different adaptors. Specifically, the DnaAlignFeatureAdaptor, which returns DnaDnaAlignFeatures objects (only used for pairwise alignment) and the GenomicAlignB
lockAdaptor, which returns GenomicAlignBlock objects (can be used for pairwise and also multiple alignments).}
\par \pard\plain \ltrpar\s11\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb144\sa144\keepn\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\ab\loch\f0\fs24\lang1033\b {\loch\f2\fs24\lang2057\i0\b DnaDnaAlignFeature objects (for pairwise alignments only)}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 Below it is a simple commented perl script to illustrate the use of DnaDnaAlignFeature objects.}
\par \pard\plain \ltrpar\s24\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa283\brdrb\brdrdb\brdrw15\brdrcf8\brsp0{\*\brdrb\brdlncol8\brdlnin1\brdlnout1\brdlndist20}\brsp0\rtlch\af19\afs12\lang255\ltrch\dbch\af13\afs12\langfe255\loch\f0\fs12\lang1033 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b use strict}}{\loch\f9\fs16\lang2057;}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b use }}{\loch\f9\fs16\lang2057Bio::EnsEMBL::Registry;}
\par {\loch\f9\fs16\lang3082\i0\b\lang3082{\b use }}{\loch\f9\fs16\lang3082\lang3082Bio::EnsEMBL::Compara::DBSQL::DBAdaptor; }
\par {\loch\f9\fs16\lang2057\i0\b{\b use }}{\loch\f9\fs16\lang2057Bio::AlignIO;}
\par {\loch\f9\fs16\lang2057\i0\b{\b use }}{\loch\f9\fs16\lang2057Bio::LocatableSeq;}
\par {\loch\f9\fs16\lang2057\i0\b{\b use }}{\loch\f9\fs16\lang2057Getopt::Long;}
\par 
\par {\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $usage} = "}
\par \pard\plain \ltrpar\s18\cf2\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 $0}
\par \pard\plain \ltrpar\s18\cf4\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0   [--help]                      this menu}
\par {\loch\f9\fs16\lang2057\i0\b0    --dbname string              (e.g. compara23) one of the compara database}
\par {\loch\f9\fs16\lang2057\i0\b0                                 Bio::EnsEMBL::Registry aliases}
\par {\loch\f9\fs16\lang2057\i0\b0    --seq_region string          (e.g. 22)}
\par {\loch\f9\fs16\lang2057\i0\b0    --seq_region_start integer   (e.g. 50000000)}
\par {\loch\f9\fs16\lang2057\i0\b0    --seq_region_end integer     (e.g. 50500000)}
\par {\loch\f9\fs16\lang2057\i0\b0    --qy string                  (e.g. human) the query species (i.e. a}
\par {\loch\f9\fs16\lang2057\i0\b0                                 Bio::EnsEMBL::Registry alias) from which alignments}
\par {\loch\f9\fs16\lang2057\i0\b0                                 are queried and seq_region refer to}
\par {\loch\f9\fs16\lang2057\i0\b0    --tg string                  (e.g. mouse) the target sepcies (i.e. a}
\par {\loch\f9\fs16\lang2057\i0\b0                                 Bio::EnsEMBL::Registry alias) to which alignments are}
\par {\loch\f9\fs16\lang2057\i0\b0                                 queried}
\par {\loch\f9\fs16\lang2057\i0\b0   [--alignment_type string]     (e.g. TRANSLATED_BLAT) type of alignment stored}
\par {\loch\f9\fs16\lang2057\i0\b0                                 (default: BLASTZ_NET)}
\par {\loch\f9\fs16\lang2057\i0\b0   [--tsl]                       print out a translated alignment}
\par {\loch\f9\fs16\lang2057\i0\b0   [--oo]                        By default, the alignments are dumped so that the --qy}
\par {\loch\f9\fs16\lang2057\i0\b0                                 species sequence is always on forward strand. --oo is}
\par {\loch\f9\fs16\lang2057\i0\b0                                 mostly useful in association with -tsl option, when a}
\par {\loch\f9\fs16\lang2057\i0\b0                                 full translated alignment program has been used e.g }
\par {\loch\f9\fs16\lang2057\i0\b0                                 TRANSLATED_BLAT, and allow to obtain the right }
\par {\loch\f9\fs16\lang2057\i0\b0                                 translation phase. So the --qy species sequence might}
\par {\loch\f9\fs16\lang2057\i0\b0                                 be reverse complemented.}
\par {\loch\f9\fs16\lang2057\i0\b0   [--ft string]                 alignment format, available in bioperl Bio::AlignIO}
\par {\loch\f9\fs16\lang2057\i0\b0                                 (default: clustalw)}
\par {\loch\f9\fs16\lang2057\i0\b0   [--uc]                        print out sequence in upper cases (default is lower}
\par {\loch\f9\fs16\lang2057\i0\b0                                 cases)}
\par {\loch\f9\fs16\lang2057\i0\b0   [--limit integer]             (e.g. 2) limit the output to the number of alignments}
\par {\loch\f9\fs16\lang2057\i0\b0                                 specified}
\par {\loch\f9\fs16\lang2057\i0\b0   [--reg_conf filepath]         the Bio::EnsEMBL::Registry configuration file. If none}
\par {\loch\f9\fs16\lang2057\i0\b0                                 given, the one set in ENSEMBL_REGISTRY will be used if}
\par {\loch\f9\fs16\lang2057\i0\b0                                 defined, if not ~/.ensembl_init will be used.}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b0{\cf4 \\n}}{\loch\f9\fs16\lang2057";}
\par 
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $dbname};}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 ({\cf2 $seq_region},{\cf2 $seq_region_start},{\cf2 $seq_region_end});}
\par {\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057({\cf2 $qy_species},{\cf2 $tg_species});}
\par {\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $help} = {\b\cf2 0};}
\par {\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $alignment_type} = "{\cf4 BLASTZ_NET}";}
\par {\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $limit};}
\par {\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $reg_conf};}
\par {\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $format} = "{\cf4 clustalw}";}
\par {\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $translated} ={\cf2  {\b 0}};}
\par {\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $uc} = {\b\cf2 0}; }
\par {\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $original_orientation} = {\b\cf2 0};}
\par 
\par {\loch\f9\fs16\lang2057\i0\b{\b unless }}{\loch\f9\fs16\lang2057({\b scalar }{\cf2 @ARGV}) {\b \{}}
\par {\loch\f9\fs16\lang2057\i0\b0   {\lang1036{\b print }}{\lang1036{\cf2 $usage};}}
\par {\loch\f9\fs16\lang1036\i0\b0\lang1036   {\b exit {\cf2 0}};}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ab\ltrch\dbch\af13\afs16\langfe255\ab\loch\f9\fs16\lang1033\b {\loch\f9\fs16\lang2057\i0\b \}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 
\par {\loch\f9\fs16\lang2057\i0\b0 GetOptions('{\cf4 help}' => {\b \\}{\cf2 $help},}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab    '{\cf4 dbname=s}' => {\b \\}{\cf2 $dbname},}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab    '{\cf4 seq_region=s}' => {\b \\}{\cf2 $seq_region},}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab    '{\cf4 seq_region_start=i}' => {\b \\}{\cf2 $seq_region_start},}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab    '{\cf4 seq_region_end=i}' => {\b \\}{\cf2 $seq_region_end},}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab    '{\cf4 qy=s}' => {\b \\}{\cf2 $qy_species},}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab    '{\cf4 tg=s}' => {\b \\}{\cf2 $tg_species},}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab    '{\cf4 alignment_type=s}' => {\b \\}{\cf2 $alignment_type},}
\par {\loch\f9\fs16\lang2057\i0\b0            '{\cf4 tsl}' => {\b \\}{\cf2 $translated},}
\par {\loch\f9\fs16\lang2057\i0\b0            '{\cf4 ft=s}' => {\b \\}{\cf2 $format},}
\par {\loch\f9\fs16\lang2057\i0\b0            '{\cf4 uc}' => {\b \\}{\cf2 $uc}, }
\par {\loch\f9\fs16\lang2057\i0\b0            '{\cf4 oo}' => {\b \\}{\cf2 $original_orientation},}
\par {\loch\f9\fs16\lang2057\i0\b0            '{\cf4 limit=i}' => {\b \\}{\cf2 $limit},}
\par {\loch\f9\fs16\lang2057\i0\b0            '{\cf4 reg_conf=s}' => {\b \\}{\cf2 $reg_conf});}
\par 
\par {\loch\f9\fs16\lang2057\i0\b{\b $|}}{\loch\f9\fs16\lang2057={\b\cf2 1};}
\par 
\par {\loch\f9\fs16\lang2057\i0\b{\b if }}{\loch\f9\fs16\lang2057({\cf2 $help}) {\b \{}}
\par {\loch\f9\fs16\lang2057\i0\b{\b   print }}{\loch\f9\fs16\lang2057{\cf2 $usage};}
\par {\loch\f9\fs16\lang2057\i0\b0   {\b exit {\cf2 0}};}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ab\ltrch\dbch\af13\afs16\langfe255\ab\loch\f9\fs16\lang1033\b {\loch\f9\fs16\lang2057\i0\b \}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Setting up Bio::EnsEMBL::Regitry}
\par {\loch\f9\fs18\lang2057\i0\b # if $reg_conf is undef, ~/.ensembl_init will be loaded if it exists}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 Bio::EnsEMBL::Registry->load_all({\cf2 $reg_conf});}
\par 
\par {\loch\f9\fs16\lang1036\i0\b0\lang1036{\cf2 $format}}{\loch\f9\fs16\lang1036\lang1036 = {\b lc }{\cf2 $format};}
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1036 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Getting the core SliceAdaptor for the query species}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $qy_sa} = Bio::EnsEMBL::Registry->get_adaptor({\cf2 $qy_species},'{\cf4 core}','{\cf4 Slice}');}
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b 
\par {\loch\f9\fs18\lang2057\i0\b # Fetching a Slice. In compara, all slices are \lquote toplevel\rquote  coordinate system.}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $qy_slice} = {\cf2 $qy_sa}->fetch_by_region('{\cf4 toplevel}',{\cf2 $seq_region},}
\par {\loch\f9\fs16\lang2057\i0\b0                                        {\cf2 $seq_region_start},{\cf2 $seq_region_end});}
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Getting the core MetaContainer adaptor for the target species}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $tg_mc} = Bio::EnsEMBL::Registry->get_adaptor({\cf2 $tg_species},'{\cf4 core}','{\cf4 MetaContainer}');}
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Getting a Bio::Species object and from it the Species genus (e.g. Mus}
\par {\loch\f9\fs18\lang2057\i0\b # musculus) of the target species, using the binomial call}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $tg_binomial} = {\cf2 $tg_mc}->get_Species->binomial;}
\par 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Getting the compara DnaAlignFeatureAdaptor to query the compara database}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $dafad} = Bio::EnsEMBL::Registry->get_adaptor({\cf2 $dbname},'{\cf4 compara}','{\cf4 DnaAlignFeature}');}
\par 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Fetching DnaDnaAlignFeatures object (these are core objects) using the}
\par {\loch\f9\fs18\lang2057\i0\b # fetch_all_by_Slice. The 3rd argument that can specify the assembly version}
\par {\loch\f9\fs18\lang2057\i0\b # can be undef. The compara API will find for you the default assembly for}
\par {\loch\f9\fs18\lang2057\i0\b # the target species.}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b my }}{\loch\f9\fs16\lang2057{\cf2 $DnaDnaAlignFeatures} = }
\par {\loch\f9\fs16\lang2057\i0\b0{\cf2 $dafad}}{\loch\f9\fs16\lang2057->fetch_all_by_Slice({\cf2 $qy_slice},{\cf2 $tg_binomial},undef,{\cf2 $alignment_type},{\cf2 $limit});}
\par 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Go through each alignment to print out in the requested format}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b foreach my }}{\loch\f9\fs16\lang2057{\cf2 $ddaf }({\b sort \{}{\cf2 $a}->start <=> {\cf2 $b}->start }
\par {\loch\f9\fs16\lang2057\i0\b0                           || {\cf2 $a}->end <=> {\cf2 $b}->end{\b \}} }
\par {\loch\f9\fs16\lang2057\i0\b0                   {\b @\{}{\cf2 $DnaDnaAlignFeatures}{\b \}}) {\b \{}}
\par 
\par {\loch\f9\fs18\lang2057\i0\b\b\fs18   {\cf5 # if the original alignment strand orientation is requested}}
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b   # ($original_orientation is true) and effectively the alignment obtained}
\par {\loch\f9\fs18\lang2057\i0\b   # is reverse complement from the originally obtained by the alignment}
\par {\loch\f9\fs18\lang2057\i0\b   # program used (if $ddaf->strands_reversed is true), then reverse}
\par {\loch\f9\fs18\lang2057\i0\b   # complement the alignment.}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\loch\f9\fs18\lang1033 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs18\lang2057\i0\b0\fs18   {\b if} ({\cf2 $original_orientation} && {\cf2 $ddaf}->strands_reversed) {\b \{}}
\par {\loch\f9\fs18\lang2057\i0\b0\fs18     {\cf2 $ddaf}->reverse_complement;}
\par {\loch\f9\fs18\lang2057\i0\b0\fs18   {\b \}}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\loch\f9\fs18\lang1033 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0   {\b\fs18\cf5 # Create a list of flags to be used in the get_SimpleAlign method call}}
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0   {\b my} {\cf2 @flags};}
\par {\loch\f9\fs16\lang2057\i0\b0   {\b push }{\cf2 @flags}, '{\cf4 translated}' {\b if} ({\cf2 $translated});}
\par {\loch\f9\fs16\lang2057\i0\b0   {\b push }{\cf2 @flags}, '{\cf4 uc}' {\b if} ({\cf2 $uc});}
\par   
\par {\loch\f9\fs18\lang2057\i0\b\b\fs18   {\cf5 # Get a Bio::SimpleAlign from the DnaDnaAlignFeature object}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0   {\b my} {\cf2 $sa} = {\cf2 $ddaf}->get_SimpleAlign({\cf2 @flags});}
\par   
\par {\loch\f9\fs18\lang2057\i0\b\b\fs18   {\cf5 # Create a Bio::AlignIO with the requested output format}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0   {\b my} {\cf2 $alignIO} = Bio::AlignIO->newFh(-interleaved => {\b\cf2 0},}
\par {\loch\f9\fs16\lang2057\i0\b0                                     -fh => {\b \\{\cf6 *STDOUT}},}
\par {\loch\f9\fs16\lang2057\i0\b0                                     -format => {\cf2 $format},}
\par {\loch\f9\fs16\lang2057\i0\b0                                     -idlength => {\b\cf2 20});}
\par 
\par {\loch\f9\fs18\lang2057\i0\b\b\fs18   {\cf5 # print out the alignment (Bio::SimpleAlign object) in the requested}}
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b   # output format through the Bio::AlignIO handler}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 
\par {\loch\f9\fs16\lang2057\i0\b0   {\lang1036{\b print }}{\lang1036{\cf2 $alignIO $sa};}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ab\ltrch\dbch\af13\afs16\langfe255\ab\loch\f9\fs16\lang1033\b {\loch\f9\fs16\lang2057\i0\b \}}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b exit {\cf2 0}}}{\loch\f9\fs16\lang2057;}
\par \pard\plain \ltrpar\s24\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa283\brdrb\brdrdb\brdrw15\brdrcf8\brsp0{\*\brdrb\brdlncol8\brdlnin1\brdlnout1\brdlndist20}\brsp0\rtlch\af19\afs12\lang255\ltrch\dbch\af13\afs12\langfe255\loch\f0\fs12\lang1033 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 So to pull out BLASTZ_NET_TIGHT alignments, let\rquote s say on part of ENCODE region ENm004 on human chromosome 22, between position 30184430 and position 30184485, against the mouse genome in clustalw format, we can use know the following command line,}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 % perl DumpAlignmentsLight.pl --dbname Compara23 --seq_region 22}
\par {\loch\f9\fs16\lang2057\i0\b0 --seq_region_start 30184430 --seq_region_end 30184485 --qy human --tg mouse}
\par {\loch\f9\fs16\lang2057\i0\b0 --alignment_type BLASTZ_NET_TIGHT}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 CLUSTAL W(1.81) multiple sequence alignment}
\par 
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 22/30184223-30184547   tgaaacgcttgtccttgaagtccctctctcggtctctgtctctcaagtcccgcaggtcct}
\par {\loch\f9\fs16\lang2057\i0\b0 11/3118113-3118437     tgaaacgtttgtccttgtagtccctctctctgtctcggtctctcaagtctcgcaggtcct}
\par {\loch\f9\fs16\lang2057\i0\b0                        ******* ********* ************ ***** ************ **********}
\par 
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 22/30184223-30184547   tatcgctaagacggtgatccttctcaaaggtccgggcagagattatcctcccactgccaa}
\par {\loch\f9\fs16\lang2057\i0\b0 11/3118113-3118437     tatcactgagacggtgatccttttcaaaggcccgggcagaaattatccttccactgccaa}
\par {\loch\f9\fs16\lang2057\i0\b0                        **** ** ************** ******* ********* ******** **********}
\par 
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 22/30184223-30184547   tcctacgtccaccaagcagacgaagcccatcactatctttctctaatggacttcctgagc}
\par {\loch\f9\fs16\lang2057\i0\b0 11/3118113-3118437     ttcttcgtccaccaagcaggcgaagtccatcactgtctttctccaatggactgccagatc}
\par {\loch\f9\fs16\lang2057\i0\b0                        * ** ************** ***** ******** ******** ******** ** ** *}
\par 
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 22/30184223-30184547   gccgggagctaacagcggctgtcacgtggcagccccctccaaagctccgtctctgagggc}
\par {\loch\f9\fs16\lang2057\i0\b0 11/3118113-3118437     gtcgggagctaacagcagctgtcacatggcagccacctccaaagcttcgtctctgtgggc}
\par {\loch\f9\fs16\lang2057\i0\b0                        * ************** ******** ******** *********** ******** ****}
\par 
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 22/30184223-30184547   tgagaacaacatctaagtcatcttctttcacacgctctcgtggatctggaaggacgtggg}
\par {\loch\f9\fs16\lang2057\i0\b0 11/3118113-3118437     tgagaacaacatctaagtcatcttctttcactcgctctcgtggatctgaaaagatgccag}
\par {\loch\f9\fs16\lang2057\i0\b0                        ******************************* **************** ** ** *   *}
\par 
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 22/30184223-30184547   aaagacaaagttaaacaaaccaaca}
\par {\loch\f9\fs16\lang2057\i0\b0 11/3118113-3118437     aaagagaaaggtaagcaaaccaaca}
\par {\loch\f9\fs16\lang2057\i0\b0                        ***** **** *** **********}
\par 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 Now on the same region, TRANSLATED_BLAT alignments against fugu in clustalw format, but at translation level now (-tsl) not nucleotide level, we can run the following command line,}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 % perl DumpAlignments.pl --dbname Compara26 --seq_region 22 \\}
\par {\loch\f9\fs16\lang2057\i0\b0 --seq_region_start 30184430 --seq_region_end 30184485 --qy human --tg fugu \\}
\par {\loch\f9\fs16\lang2057\i0\b0 --alignment_type TRANSLATED_BLAT --tsl}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 CLUSTAL W(1.81) multiple sequence alignment}
\par 
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 22/30184431-30184484    aapskapslraenni*vi}
\par {\loch\f9\fs16\lang2057\i0\b0 scaffold_2267/1347-1400 tspskaaplwa*yyi*ii}
\par {\loch\f9\fs16\lang2057\i0\b0                         ::****..* *   **:*}
\par 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 By default, the alignments will dump with --qy species sequence on forward strand. To make sure that the alignment, you got is on the strand on which it was originally generated using the --oo option will check that and restore the right strandness. See be
low the difference in the translation level alignment obtained.}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 % perl DumpAlignments.pl --dbname Compara26 --seq_region 22 \\}
\par {\loch\f9\fs16\lang2057\i0\b0 --seq_region_start 30184430 --seq_region_end 30184485 --qy human --tg fugu \\}
\par {\loch\f9\fs16\lang2057\i0\b0 --alignment_type TRANSLATED_BLAT --tsl --oo}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 CLUSTAL W(1.81) multiple sequence alignment}
\par 
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 22/30184431-30184484    ddldvvlspqrrsfgggc}
\par {\loch\f9\fs16\lang2057\i0\b0 scaffold_2267/1347-1400 ddldvilspqrrsfgggc}
\par {\loch\f9\fs16\lang2057\i0\b0                         *****:************}
\par 
\par \pard\plain \ltrpar\s11\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb144\sa144\keepn\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs24\langfe255\ab\loch\f0\fs24\lang1033\b {\loch\f2\fs24\lang2057\i0\b GenomicAlignBlock objects (pairwise/multiple alignments)}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 GenomicAlignBlocks are the new way to store and fetch genomic alignments. A GenomicAlignBlock contains several GenomicAlign objects. Every GenomicAlign object corresponds to a piece of genomic sequence aligned with the other GenomicAlign in the same Genomi
cAlignBlock. A GenomicAlign object is always related with other GenomicAlign objects and this relation is defined through the GenomicAlignBlock object. Therefore the usual way to fetch genomic alignments is by fetching GenomicAlignBlock objects. We have to
 start by getting the corresponding adaptor:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Getting the GenomicAlignBlock adaptor:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 my $genomic_align_block_adaptor = Bio::EnsEMBL::Registry->get_adaptor(}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab $dbname, 'compara', 'GenomicAlign');}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f2\fs18\lang1033\b 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 In order to fetch the right alignments we need to specify a couple of data: the type of alignment and the piece of genomic sequence in which we are looking for alignments. The type of alignment is a more tricky now: you need to specify both the alignment m
ethod and the set of genomes. In order to simply this task, you could use the new {\f9 Bio::EnsEMBL::Compara::MethodLinkSpeciesSet} object. The best way to use them is by fetching them from the database:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Getting the GenomeDB adaptor:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 my $genome_db_adaptor = Bio::EnsEMBL::Registry->get_adaptor(}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab $dbname, 'compara', 'GenomeDB');}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Fetching GenomeDB objects for human and mouse:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 my $human_genome_db = $genome_db_adaptor->fetch_by_name_asembly('Homo sapiens');}
\par {\loch\f9\fs16\lang2057\i0\b0 my $mouse_genome_db = $genome_db_adaptor->fetch_by_name_asembly('Homo sapiens');}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Getting the MethodLinkSpeciesSet adaptor:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 my $method_link_species_set_adaptor = Bio::EnsEMBL::Registry->get_adaptor(}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab $dbname, 'compara', 'MethodLinkSpeciesSet');}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Fetching the MethodLinkSpeciesSet object corresponding to BLASTZ_NET alignments between human and mouse genomic sequences:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 my $human_mouse_blastz_net_mlss =}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab $method_link_species_set_adaptor->fetch_by_method_link_type_GenomeDBs(}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab \tab \ldblquote BLASTZ_NET\rdblquote ,}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab \tab [$human_genome_db, $mouse_genome_db]}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab );}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f2\fs16\lang1033 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 There are two ways to fetch GenomicAlignBlocks. One is uses {\f10 Bio::EnsEMBL::Slice} objects while the second one is based on {\f10 Bio::EnsEMBL::Compara::DnaFrag} objects for specifying  the piece of genomic sequence in which we are looking for alignments.}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Getting the Slice adaptor:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 $slice_adaptor = Bio::EnsEMBL::Registry->get_adaptor(}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab $query_species, 'core', 'Slice');}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Fetching a Slice object:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 $query_slice = $qy_sa->fetch_by_region('{\cf4 toplevel}', $seq_region, $seq_region_start,}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab $seq_region_end);}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Fetching all the GenomicAlignBlock corresponding to this Slice:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 my $genomic_align_blocks =}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab $genomic_align_block_adaptor->fetch_by_MethodLinkSpeciesSet_Slice(}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab \tab $human_mouse_blastz_net_mlss, $query_slice);}
\par 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 Here is an example script with all of this:}
\par \pard\plain \ltrpar\s24\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa283\brdrb\brdrdb\brdrw15\brdrcf8\brsp0{\*\brdrb\brdlncol8\brdlnin1\brdlnout1\brdlndist20}\brsp0\rtlch\af19\afs12\lang255\ltrch\dbch\af13\afs12\langfe255\loch\f0\fs12\lang1033 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b use}}{\loch\f9\fs16\lang2057 {\b strict};}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b use}}{\loch\f9\fs16\lang2057 Bio::EnsEMBL::Registry;}
\par {\loch\f9\fs16\lang2057\i0\b{\b use}}{\loch\f9\fs16\lang2057 Bio::EnsEMBL::Utils::Exception {\b qw(}{\cf4 throw}{\b )};}
\par {\loch\f9\fs16\lang2057\i0\b{\b use}}{\loch\f9\fs16\lang2057 Bio::SimpleAlign;}
\par {\loch\f9\fs16\lang2057\i0\b{\b use}}{\loch\f9\fs16\lang2057 Bio::AlignIO;}
\par {\loch\f9\fs16\lang2057\i0\b{\b use}}{\loch\f9\fs16\lang2057 Bio::LocatableSeq;}
\par {\loch\f9\fs16\lang2057\i0\b{\b use}}{\loch\f9\fs16\lang2057 Getopt::Long;}
\par 
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $usage} = {\b qq\{}}
\par \pard\plain \ltrpar\s18\cf4\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 perl DumpMultiAlign.pl}
\par {\loch\f9\fs16\lang2057\i0\b0   Getting help:}
\par {\loch\f9\fs16\lang2057\i0\b0     [--help]}
\par   
\par {\loch\f9\fs16\lang2057\i0\b0   General configuration:}
\par {\loch\f9\fs16\lang2057\i0\b0     [--reg_conf registry_configuration_file]}
\par {\loch\f9\fs16\lang2057\i0\b0         the Bio::EnsEMBL::Registry configuration file. If none given,}
\par {\loch\f9\fs16\lang2057\i0\b0         the one set in ENSEMBL_REGISTRY will be used if defined, if not}
\par {\loch\f9\fs16\lang2057\i0\b0         ~/.ensembl_init will be used.}
\par {\loch\f9\fs16\lang2057\i0\b0     [--dbname compara_db_name]}
\par {\loch\f9\fs16\lang2057\i0\b0         the name of compara DB in the registry_configuration_file or any}
\par {\loch\f9\fs16\lang2057\i0\b0         of its aliases. Uses "compara" by default.}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0   For the query slice:}
\par {\loch\f9\fs16\lang2057\i0\b0     [--species species]}
\par {\loch\f9\fs16\lang2057\i0\b0         Query species. Default is "human"}
\par {\loch\f9\fs16\lang2057\i0\b0     [--coord_system coordinates_name]}
\par {\loch\f9\fs16\lang2057\i0\b0         Query coordinate system. Default is "chromosome"}
\par {\loch\f9\fs16\lang2057\i0\b0     --seq_region region_name}
\par {\loch\f9\fs16\lang2057\i0\b0         Query region name, i.e. the chromosome name}
\par {\loch\f9\fs16\lang2057\i0\b0     --seq_region_start start}
\par {\loch\f9\fs16\lang2057\i0\b0     --seq_region_end end}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0   For the alignments:}
\par {\loch\f9\fs16\lang2057\i0\b0     [--alignment_type method_link_name]}
\par {\loch\f9\fs16\lang2057\i0\b0         The type of alignment. Default is "BLASTZ_NET"}
\par {\loch\f9\fs16\lang2057\i0\b0     [--set_of_species species1:species2:species3:...]}
\par {\loch\f9\fs16\lang2057\i0\b0         The list of species used to get those alignments. Default is}
\par {\loch\f9\fs16\lang2057\i0\b0         "human:mouse". The names should correspond to the name of the}
\par {\loch\f9\fs16\lang2057\i0\b0         core database in the registry_configuration_file or any of its}
\par {\loch\f9\fs16\lang2057\i0\b0         aliases}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0   Ouput:}
\par {\loch\f9\fs16\lang2057\i0\b0     [--output_format clustalw|fasta|...]}
\par {\loch\f9\fs16\lang2057\i0\b0         The type of output you want. "clustalw" is the default.}
\par {\loch\f9\fs16\lang2057\i0\b0     [--output_file filename]}
\par {\loch\f9\fs16\lang2057\i0\b0         The name of the output file. By default the output is the}
\par {\loch\f9\fs16\lang2057\i0\b0         standard output}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b \}}}{\loch\f9\fs16\lang2057;}
\par 
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $reg_conf};}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $dbname }= "{\cf4 compara}";}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $species} = "{\cf4 human}";}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $coord_system }= "{\cf4 chromosome}";}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $seq_region }= "{\cf4 14}";}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $seq_region_start }= {\b\cf2 75000000};}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $seq_region_end} = {\b\cf2 75010000};}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $alignment_type }= "{\cf4 BLASTZ_NET}";}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $set_of_species }= "{\cf4 human:mouse}";}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $output_file }= {\b undef};}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $output_format} = "{\cf4 clustalw}";}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $help};}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0 GetOptions(}
\par {\loch\f9\fs16\lang2057\i0\b0     "{\cf4 help}" => {\b \\}{\cf2 $help},}
\par {\loch\f9\fs16\lang2057\i0\b0     "{\cf4 reg_conf=s}" => {\b \\}{\cf2 $reg_conf},}
\par {\loch\f9\fs16\lang2057\i0\b0     "{\cf4 dbname=s}" => {\b \\}{\cf2 $dbname},}
\par {\loch\f9\fs16\lang2057\i0\b0     "{\cf4 species=s}" => {\b \\}{\cf2 $species},}
\par {\loch\f9\fs16\lang2057\i0\b0     "{\cf4 coord_system=s}" => {\b \\}{\cf2 $coord_system},}
\par {\loch\f9\fs16\lang2057\i0\b0     "{\cf4 seq_region=s}" => {\b \\}{\cf2 $seq_region},}
\par {\loch\f9\fs16\lang2057\i0\b0     "{\cf4 seq_region_start=i}" => {\b \\}{\cf2 $seq_region_start},}
\par {\loch\f9\fs16\lang2057\i0\b0     "{\cf4 seq_region_end=i}" => {\b \\}{\cf2 $seq_region_end},}
\par {\loch\f9\fs16\lang2057\i0\b0     "{\cf4 alignment_type=s}" => {\b \\}{\cf2 $alignment_type},}
\par {\loch\f9\fs16\lang2057\i0\b0     "{\cf4 set_of_species=s}" => {\b \\}{\cf2 $set_of_species},}
\par {\loch\f9\fs16\lang2057\i0\b0     "{\cf4 output_format=s}" => {\b \\}{\cf2 $output_format},}
\par {\loch\f9\fs16\lang2057\i0\b0     "{\cf4 output_file=s}" => {\b \\}{\cf2 $output_file},}
\par {\loch\f9\fs16\lang2057\i0\b0   );}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Print Help and exit}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b if}}{\loch\f9\fs16\lang2057 ({\cf2 $help}) {\b \{}}
\par {\loch\f9\fs16\lang2057\i0\b0   {\b print }{\cf2 $usage};}
\par {\loch\f9\fs16\lang2057\i0\b0   {\b exit}({\b\cf2 0});}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ab\ltrch\dbch\af13\afs16\langfe255\ab\loch\f9\fs16\lang1033\b {\loch\f9\fs16\lang2057\i0\b \}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 
\par {\loch\f9\fs16\lang2057\i0\b{\b if }}{\loch\f9\fs16\lang2057({\cf2 $output_file}) {\b \{}}
\par {\loch\f9\fs16\lang2057\i0\b0   {\b open}({\b\cf6 STDOUT}, ">{\cf2 $output_file}") {\b or die}("{\cf4 Cannot open }{\cf2 $output_file}");}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ab\ltrch\dbch\af13\afs16\langfe255\ab\loch\f9\fs16\lang1033\b {\loch\f9\fs16\lang2057\i0\b \}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Configure the Bio::EnsEMBL::Registry}
\par {\loch\f9\fs18\lang2057\i0\b # Uses $reg_conf if supllied. Uses ENV\{ENSMEBL_REGISTRY\} instead if defined.}
\par {\loch\f9\fs18\lang2057\i0\b # Uses ~/.ensembl_init if all the previous fail.}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 Bio::EnsEMBL::Registry->load_all({\cf2 $reg_conf});}
\par 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Getting all the Bio::EnsEMBL::Compara::GenomeDB objects}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $genome_dbs};}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $genome_db_adaptor }= Bio::EnsEMBL::Registry->get_adaptor({\cf2 $dbname}, '{\cf4 compara}',}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab '{\cf4 GenomeDB}');}
\par {\loch\f9\fs16\lang2057\i0\b0 throw("{\cf4 Registry configuration file has no data for connecting to <}{\cf2 $dbname}{\cf4 >}")}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab {\b if} ({\b !}{\cf2 $genome_db_adaptor});}
\par {\loch\f9\fs16\lang2057\i0\b{\b foreach my }}{\loch\f9\fs16\lang2057{\cf2 $this_species }({\b split}("{\cf4 :}", {\cf2 $set_of_species})) {\b \{}}
\par {\loch\f9\fs16\lang2057\i0\b0   {\b my} {\cf2 $this_meta_container_adaptor} = Bio::EnsEMBL::Registry->get_adaptor(}
\par {\loch\f9\fs16\lang2057\i0\b0       {\cf2 $this_species}, '{\cf4 core}', '{\cf4 MetaContainer}');}
\par {\loch\f9\fs16\lang2057\i0\b0   throw("{\cf4 Registry configuration file has no data for connecting to <}{\cf2 $this_species}{\cf4 >}")}
\par {\loch\f9\fs16\lang2057\i0\b0       {\b if} ({\b !}{\cf2 $this_meta_container_adaptor});}
\par {\loch\f9\fs16\lang2057\i0\b0   {\b my} {\cf2 $this_binomial_id} = {\cf2 $this_meta_container_adaptor}->get_Species->binomial;}
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b   # Fetch Bio::EnsEMBL::Compara::GenomeDB object}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0   {\b my} {\cf2 $genome_db} = {\cf2 $genome_db_adaptor}->fetch_by_name_assembly({\cf2 $this_binomial_id});}
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b   # Add Bio::EnsEMBL::Compara::GenomeDB object to the list}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0   {\b push}({\cf2 @$genome_dbs}, {\cf2 $genome_db});}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ab\ltrch\dbch\af13\afs16\langfe255\ab\loch\f9\fs16\lang1033\b {\loch\f9\fs16\lang2057\i0\b \}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Getting Bio::EnsEMBL::Compara::MethodLinkSpeciesSet obejct}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $method_link_species_set_adaptor }= Bio::EnsEMBL::Registry->get_adaptor(}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab {\cf2 $dbname}, '{\cf4 compara}', '{\cf4 MethodLinkSpeciesSet}');}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $method_link_species_set} =}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab {\cf2 $method_link_species_set_adaptor}->{\cf1 fetch_by_method_link_type_GenomeDBs}(}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab \tab {\cf2 $alignment_type}, {\cf2 $genome_dbs});}
\par {\loch\f9\fs16\lang2057\i0\b0 throw("{\cf4 The database do not contain any }{\cf2 $alignment_type} {\cf4 data for} {\cf2 $set_of_species}{\cf4 !}")}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab {\b if} ({\b !}{\cf2 $method_link_species_set});}
\par 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Fetching the query Slice:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $slice_adaptor }= Bio::EnsEMBL::Registry->get_adaptor({\cf2 $species}, '{\cf4 core}', '{\cf4 Slice}');}
\par {\loch\f9\fs16\lang2057\i0\b0 throw("{\cf4 Registry configuration file has no data for connecting to <}{\cf2 $species}{\cf4 >}")}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab {\b if} ({\b !}{\cf2 $slice_adaptor});}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $query_slice} = {\cf2 $slice_adaptor}->fetch_by_region('{\cf4 toplevel}', {\cf2 $seq_region}, {\cf2 $seq_region_start}, {\cf2 $seq_region_end});}
\par {\loch\f9\fs16\lang2057\i0\b0 throw("{\cf4 No Slice can be created with coordinates }{\cf2 $seq_region}{\cf4 :}{\cf2 $seq_region_start}{\cf4 -}\rdblquote .}
\par {\loch\f9\fs16\lang2057\i0\b0 \tab \rdblquote {\cf2 $seq_region_end}") {\b if} ({\b !}{\cf2 $query_slice});}
\par 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Fetching all the GenomicAlignBlock corresponding to this Slice:}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $genomic_align_block_adaptor} = Bio::EnsEMBL::Registry->get_adaptor(}
\par {\loch\f9\fs16\lang2057\i0\b0     {\cf2 $dbname}, '{\cf4 compara}', '{\cf4 GenomicAlignBlock}');}
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $genomic_align_blocks} =}
\par {\loch\f9\fs16\lang2057\i0\b0{\cf2     $genomic_align_block_adaptor}}{\loch\f9\fs16\lang2057->fetch_all_by_MethodLinkSpeciesSet_Slice(}
\par {\loch\f9\fs16\lang2057\i0\b0         {\cf2 $method_link_species_set}, {\cf2 $query_slice});}
\par 
\par {\loch\f9\fs16\lang2057\i0\b{\b my}}{\loch\f9\fs16\lang2057 {\cf2 $all_aligns};}
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # Create a Bio::SimpleAlign object from every GenomicAlignBlock }
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang2057\i0\b{\b foreach my}}{\loch\f9\fs16\lang2057 {\cf2 $this_genomic_align_block }({\cf2 @$genomic_align_blocks}) {\b \{}}
\par {\loch\f9\fs16\lang2057\i0\b0   {\b my }{\cf2 $simple_align }= Bio::SimpleAlign->new();}
\par {\loch\f9\fs16\lang2057\i0\b0   {\cf2 $simple_align}->id("{\cf4 GAB#}".{\cf2 $this_genomic_align_block}->dbID);}
\par {\loch\f9\fs16\lang2057\i0\b0   {\cf2 $simple_align}->score({\cf2 $this_genomic_align_block}->score);}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0   {\b my }{\cf2 $all_genomic_aligns }= {\cf2 $this_genomic_align_block}->get_all_GenomicAligns;}
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b   # Create a Bio::LocatableSeq object from every GenomicAlign}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0   {\b foreach my }{\cf2 $this_genomic_align }({\cf2 @$all_genomic_aligns}) {\b \{}}
\par {\loch\f9\fs16\lang2057\i0\b0     {\b my} {\cf2 $seq_name }= {\cf2 $this_genomic_align}->dnafrag->genome_db->name;}
\par {\loch\f9\fs16\lang2057\i0\b0     {\cf2 $seq_name} =~ {\cf4 s/(.)\\w* (.)\\w*/$1$2/};}
\par {\loch\f9\fs16\lang2057\i0\b0     {\cf2 $seq_name }.= {\cf2 $this_genomic_align}->dnafrag->name;}
\par {\loch\f9\fs16\lang2057\i0\b0     {\b my} {\cf2 $aligned_sequence} = {\cf2 $this_genomic_align}->aligned_sequence;}
\par {\loch\f9\fs16\lang2057\i0\b0     {\b my} {\cf2 $seq }= Bio::LocatableSeq->new(}
\par {\loch\f9\fs16\lang2057\i0\b0             -SEQ    => {\cf2 $aligned_sequence},}
\par {\loch\f9\fs16\lang2057\i0\b0             -START  => {\cf2 $this_genomic_align}->dnafrag_start,}
\par {\loch\f9\fs16\lang2057\i0\b0             -END    => {\cf2 $this_genomic_align}->dnafrag_end,}
\par {\loch\f9\fs16\lang2057\i0\b0             -ID     => {\cf2 $seq_name},}
\par {\loch\f9\fs16\lang2057\i0\b0             -STRAND => {\cf2 $this_genomic_align}->dnafrag_strand}
\par {\loch\f9\fs16\lang2057\i0\b0         );}
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b     # Add this Bio::LocatableSeq to the Bio::SimpleAlign}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0     {\cf2 $simple_align}->add_seq({\cf2 $seq});}
\par {\loch\f9\fs16\lang2057\i0\b0   {\b \}}}
\par {\loch\f9\fs16\lang2057\i0\b0   {\b push}({\cf2 @$all_aligns}, {\cf2 $simple_align});}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ab\ltrch\dbch\af13\afs16\langfe255\ab\loch\f9\fs16\lang1033\b {\loch\f9\fs16\lang2057\i0\b \}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 
\par \pard\plain \ltrpar\s18\cf5\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # print all the genomic alignments using a Bio::AlignIO object}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033{\loch\f9\fs16\lang3082\i0\b\lang3082{\b my }}{\loch\f9\fs16\lang3082\lang3082{\cf2 $alignIO }= Bio::AlignIO->newFh(}
\par {\loch\f9\fs16\lang3082\i0\b0{\lang3082         }}{\loch\f9\fs16\lang2057-interleaved => {\b\cf2 0},}
\par {\loch\f9\fs16\lang2057\i0\b0         -fh => {\b \\{\cf6 *STDOUT}},}
\par {\loch\f9\fs16\lang2057\i0\b0         -format => {\cf2 $output_format},}
\par {\loch\f9\fs16\lang2057\i0\b0         -idlength => {\b\cf2 10}}
\par {\loch\f9\fs16\lang2057\i0\b0     );}
\par   
\par {\loch\f9\fs16\lang2057\i0\b{\b foreach my }}{\loch\f9\fs16\lang2057{\cf2 $this_align }({\cf2 @$all_aligns}) {\b \{}}
\par {\loch\f9\fs16\lang2057\i0\b0   {\b print} {\cf2 $alignIO $this_align};}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ab\ltrch\dbch\af13\afs16\langfe255\ab\loch\f9\fs16\lang1033\b {\loch\f9\fs16\lang2057\i0\b \}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 
\par {\loch\f9\fs16\lang2057\i0\b{\b exit}}{\loch\f9\fs16\lang2057;}
\par \pard\plain \ltrpar\s24\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sa283\brdrb\brdrdb\brdrw15\brdrcf8\brsp0{\*\brdrb\brdlncol8\brdlnin1\brdlnout1\brdlndist20}\brsp0\rtlch\af19\afs20\lang255\ltrch\dbch\af13\afs20\langfe255\loch\f0\fs20\lang1033 
\par \pard\plain \sb240\sa60\keepn\f2\fs28\lang2057\b\f14\fs28\b\f14\fs20\sl100\slmult0\qj \ltrpar\s10\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa60\keepn\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs28\langfe255\ab\loch\f2\fs28\lang1033\b {\loch\f2\fs28\lang2057\i0\b Orthologues and Protein clusters}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 NB : This following is very much a draft at this stage with some piece of code to give examples, but not much comments.}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\ab\loch\f2\fs20\lang2057\b {\loch\f2\fs20\lang2057\i0\b Member objects}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f12\fs18\lang1033\b {\loch\f12\fs18\lang2057\i0\b # get the MemberAdaptor}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs16\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f12\fs16\lang1033 {\loch\f12\fs16\lang2057\i0\b0 my $ma = Bio::EnsEMBL::Registry->get_adaptor($dbname,\rquote compara\rquote ,\rquote Member\rquote );}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f12\fs18\lang1033\b {\loch\f12\fs18\lang2057\i0\b # fetch a Member}
\par \pard\plain \ltrpar\s1\sl100\slmult0\sa144\ql\rtlch\af14\afs16\lang255\ltrch\dbch\af14\afs16\langfe255\loch\f12\fs16\lang2057 {\loch\f12\fs16\lang2057\i0\b0 my $member = $ma->fetch_by_source_stable_id(\lquote ENSEMBLGENE\rquote ,\rquote ENSG00000004059\rquote );}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ltrch\dbch\af13\afs18\langfe255\ab\loch\f12\fs18\lang1033\b {\loch\f12\fs18\lang2057\i0\b # print out some information about the Member}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f12\fs20\lang2057{\loch\f12\fs16\lang2057\i0\b0\fs16 print join \ldblquote  \ldblquote , map \{ $member->$_ \} qw(chr_name chr_start chr_end description source_name taxon_id taxon),\rdblquote \\n\rdblquote ;}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs16\lang255\ltrch\dbch\af14\afs16\langfe255\loch\f12\fs16\lang2057 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057{\loch\f12\fs20\lang2057\i0\b0{\f12 chr_name}}{\loch\f2\fs20\lang2057{\fs16 , }{\f12 chr_start}{\fs16 , }{\f12 chr_end} and {\f12 description }are self-explanatory.}
\par {\loch\f12\fs20\lang2057\i0\b0{\f12 source_name }}{\loch\f2\fs20\lang2057tells about the origin of the Member entry, and  can be either }
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\li0\ri0\lin0\rin0\fi720\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 ENSEMBLPEP, derived from ensembl translation,}
\par {\loch\f2\fs20\lang2057\i0\b0 or ENSEMBLGENE, derived from an ensembl gene,}
\par {\loch\f2\fs20\lang2057\i0\b0 or SWISSPROT, derived from a Uniprot/Swissprot entry,}
\par {\loch\f2\fs20\lang2057\i0\b0 or SPTREMBL, derived from a Uniprot/SP-TrEMBL entry.}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057{\loch\f12\fs20\lang2057\i0\b0{\f12 taxon_id}}{\loch\f2\fs20\lang2057{\f7  }e.g. 9606 correspond to the NCBI taxonomy identifier (see {\field{\*\fldinst HYPERLINK "http://www.ncbi.nlm.nih.gov/Taxonomy/taxonomyhome.html/" }{\fldrslt \*\cs30\cf2\ul\rtlch\ltrch\dbch\loch\f0\fs24\lang1033{\*\cs30\cf2\ul\rtlch\ltrch\dbch\loch\f0\fs24\lang1033 http://www.ncbi.nlm.nih.gov/Taxonomy/taxonomyhome.html/}}} for more details).}
\par {\loch\f12\fs20\lang2057\i0\b0{\f12 taxon }}{\loch\f2\fs20\lang2057returns a Bio::EnsEMBL::Compara::Taxon object that inherits itself from Bio::Species, so from this object you can get additional information about the species.}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 my $taxon = $member->taxon;}
\par {\loch\f9\fs16\lang2057\i0\b0 print join \ldblquote ; \ldblquote , map \{ $taxon->$_ \} qw(common_name genus species binomial classification),\rdblquote \\n\rdblquote ;}
\par 
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 respectively for these method calls and in the case of human species, you will obtain}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs20\langfe255\loch\f9\fs20\lang3082 {\loch\f9\fs20\lang3082\i0\b0 human; Homo; sapiens; Homo sapiens; sapiens Homo Hominidae Catarrhini Primates Eutheria Mammalia Euteleostomi Vertebrata Craniata Chordata Metazoa Eukaryota}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang3082 {\loch\f9\fs16\lang3082\i0\b0 \tab  }
\par \pard\plain \ltrpar\s1\sl100\slmult0\sa144\ql\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\ab\loch\f2\fs20\lang2057\b {\loch\f2\fs20\lang2057\i0\b Homology objects}
\par \pard\plain \ltrpar\s1\sl100\slmult0\sa144\ql\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # first you have to get a Member object. In case of homology is a gene, in }
\par {\loch\f9\fs18\lang2057\i0\b # case of family it can be a gene or a protein}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 my $ma = Bio::EnsEMBL::Registry->get_adaptor($dbname,\rquote compara\rquote ,\rquote Member\rquote );}
\par {\loch\f9\fs16\lang2057\i0\b0 my $member = $ma->fetch_by_source_stable_id(\lquote ENSEMBLGENE\rquote ,\rquote ENSG00000004059\rquote );}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # then you get the homologies where the member is involved}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 my $ha = Bio::EnsEMBL::Registry->get_adaptor($dbname,\rquote compara\rquote ,\rquote Homology\rquote );}
\par {\loch\f9\fs16\lang2057\i0\b0 my $homologies = $ha->fetch_by_Member($member);}
\par {\loch\f9\fs16\lang2057\i0\b0 fetch_by_Member_Homology_source (fetch_by_Member_MethodLink)}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # That will return an array reference with all homologies (orthologues, and}
\par {\loch\f9\fs18\lang2057\i0\b # in some cases paralogues) against other species.}
\par {\loch\f9\fs18\lang2057\i0\b # Then for each homology, you get all the Members implicated}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 foreach my $homology (@\{$homologies\}) \{}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # You will find different kind of description}
\par {\loch\f9\fs18\lang2057\i0\b # UBRH, MBRH, MBRH, RHS, YoungParalogues}
\par {\loch\f9\fs18\lang2057\i0\b # see ensembl-compara/docs/docs/schema_doc.html for more details}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 print $homology->description,\rdblquote  \rdblquote , $homology->subtype,\rdblquote \\n\rdblquote ;}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # And if they are defined dN and dS related values}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 print join \ldblquote  \ldblquote , map \{ $homology->$_ \} qw(dn ds n s lnl threshold_on_ds),\rdblquote \\n\rdblquote ;}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # each homology relation have only 2 members, you should find there}
\par {\loch\f9\fs18\lang2057\i0\b # the initial member used in the first fetching}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 for each my $member_attribute (@\{$homology->get_all_Member_Attribute\})}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # for each Member, you get information on the Member specifically and in }
\par {\loch\f9\fs18\lang2057\i0\b # relation to the homology relation via Attribute object}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0     my ($member, $attribute) = @\{$member_attribute\};}
\par {\loch\f9\fs16\lang2057\i0\b0     print join \ldblquote  \ldblquote , map \{ $member->$_ \}  qw(stable_id taxon_id),"\\n";}
\par {\loch\f9\fs16\lang2057\i0\b0     print join \ldblquote  \ldblquote , map \{ $attribute->$_ \} qw(perc_id perc_pos perc_cov),"\\n";}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0   \}}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # You can even retrieve the HSP alignment between the 2 proteins, }
\par {\loch\f9\fs18\lang2057\i0\b # HSP used to build the homology releationship at the peptide level}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0   my $sa = $homology->get_SimpleAlign();}
\par {\loch\f9\fs16\lang2057\i0\b0   my $alignIO = Bio::AlignIO->newFh(-interleaved => 0,}
\par {\loch\f9\fs16\lang2057\i0\b0                                     -fh => \\*STDOUT,}
\par {\loch\f9\fs16\lang2057\i0\b0                                     -format => "clustalw",}
\par {\loch\f9\fs16\lang2057\i0\b0                                     -idlength => 20);}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0   {\lang1036 print $alignIO $sa;{ }}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1036 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs18\lang255\ab\ltrch\dbch\af13\afs18\langfe255\ab\loch\f9\fs18\lang1033\b {\loch\f9\fs18\lang2057\i0\b # or at the nucleotide level. You will need to make you have a connection to}
\par {\loch\f9\fs18\lang2057\i0\b # the corresponding core databases through the Bio::EnsEMBL::Registry}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0   $sa = $homology->get_SimpleAlign(\lquote cdna\rquote );}
\par {\loch\f9\fs16\lang2057\i0\b0   my $alignIO = Bio::AlignIO->newFh(-interleaved => 0,}
\par {\loch\f9\fs16\lang2057\i0\b0                                     -fh => \\*STDOUT,}
\par {\loch\f9\fs16\lang2057\i0\b0                                     -format => "phylip",}
\par {\loch\f9\fs16\lang2057\i0\b0                                     -idlength => 20);}
\par 
\par {\loch\f9\fs16\lang2057\i0\b0   {\lang1036 print $alignIO $sa;}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1036 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f9\fs16\lang1033 {\loch\f9\fs16\lang2057\i0\b0 \}}
\par 
\par \pard\plain \ltrpar\s1\sl100\slmult0\sa144\ql\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\ab\loch\f2\fs20\lang2057\b {\loch\f2\fs20\lang2057\i0\b Family objects}
\par \pard\plain \ltrpar\s1\sl100\slmult0\sa144\ql\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 You can obtain them in the same way as Homology objects}
\par 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f12\fs16\lang1033 {\loch\f12\fs16\lang2057\i0\b0 my $ma = Bio::EnsEMBL::Registry->get_adaptor($dbname,\rquote compara\rquote ,\rquote Member\rquote );}
\par {\loch\f12\fs16\lang2057\i0\b0 my $member = $ma->fetch_by_source_stable_id(\lquote ENSEMBLGENE\rquote ,\rquote ENSG00000004059\rquote );}
\par 
\par {\loch\f12\fs16\lang2057\i0\b0 my $fa = Bio::EnsEMBL::Registry->get_adaptor($dbname,\rquote compara\rquote ,\rquote Family\rquote );}
\par {\loch\f12\fs16\lang2057\i0\b0 my $families = $fa->fetch_by_Member($member);}
\par 
\par {\loch\f12\fs16\lang2057\i0\b0 foreach my $family (@\{$families\}) \{}
\par {\loch\f12\fs16\lang2057\i0\b0   print join \ldblquote  \ldblquote , map \{ $family->$_ \}  qw({description description_score}),"\\n";}
\par 
\par {\loch\f12\fs16\lang2057\i0\b0   for each my $member_attribute (@\{$family->get_all_Member_Attribute\})}
\par {\loch\f12\fs16\lang2057\i0\b0     my ($member, $attribute) = @\{$member_attribute\};}
\par {\loch\f12\fs16\lang2057\i0\b0     print $member->stable_id," ",$member->taxon_id,"\\n";}
\par {\loch\f12\fs16\lang2057\i0\b0   \}}
\par 
\par {\loch\f12\fs16\lang2057\i0\b0   my $sa = $family->get_SimpleAlign();}
\par {\loch\f12\fs16\lang2057\i0\b0   my $alignIO = Bio::AlignIO->newFh(-interleaved => 0,}
\par {\loch\f12\fs16\lang2057\i0\b0                                     -fh => \\*STDOUT,}
\par {\loch\f12\fs16\lang2057\i0\b0                                     -format => "phylip",}
\par {\loch\f12\fs16\lang2057\i0\b0                                     -idlength => 20);}
\par 
\par {\loch\f12\fs16\lang2057\i0\b0   {\lang1036 print $alignIO $sa;}}
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f12\fs16\lang1036 
\par \pard\plain \ltrpar\s18\cf0\sl100\slmult0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs16\langfe255\loch\f12\fs16\lang1033{\loch\f12\fs16\lang1036\i0\b0{\lang1036   }}{\loch\f12\fs16\lang2057$sa = $family->get_SimpleAlign(\lquote cdna\rquote );}
\par {\loch\f12\fs16\lang2057\i0\b0   my $alignIO = Bio::AlignIO->newFh(-interleaved => 0,}
\par {\loch\f12\fs16\lang2057\i0\b0                                     -fh => \\*STDOUT,}
\par {\loch\f12\fs16\lang2057\i0\b0                                     -format => "phylip",}
\par {\loch\f12\fs16\lang2057\i0\b0                                     -idlength => 20);}
\par 
\par {\loch\f12\fs16\lang2057\i0\b0   {\lang1036 print $alignIO $sa;}}
\par {\loch\f12\fs16\lang2057\i0\b0 \}}
\par 
\par \pard\plain \sb240\sa60\keepn\f2\fs28\lang2057\b\f14\fs28\b\f14\fs20\sl100\slmult0\qj \ltrpar\s10\cf0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa60\keepn\rtlch\af19\afs24\lang255\ltrch\dbch\af13\afs28\langfe255\ab\loch\f2\fs28\lang1033\b {\loch\f2\fs28\lang2057\i0\b Further help}
\par \pard\plain \ltrpar\s1\sl100\slmult0\qj\sa144\rtlch\af14\afs20\lang255\ltrch\dbch\af14\afs20\langfe255\loch\f2\fs20\lang2057 {\loch\f2\fs20\lang2057\i0\b0 For additional information or help mail {\field{\*\fldinst HYPERLINK "mailto:ensemb-dev@ebi.ac.uk" }{\fldrslt \*\cs30\cf2\ul\rtlch\ltrch\dbch\loch\f0\fs24\lang1033{\*\cs30\cf2\ul\rtlch\ltrch\dbch\loch\f0\fs24\lang1033 ensemb-dev@ebi.ac.uk}}}. You will need to subscribe to this mailing list to use it (see how to subscribe in {\field{\*\fldinst HYPERLINK "http://www.ensembl.org/Docs/Lists/" }{\fldrslt \*\cs30\cf2\ul\rtlch\ltrch\dbch\loch\f0\fs24\lang1033{\*\cs30\cf2\ul\rtlch\ltrch\dbch\loch\f0\fs24\lang1033 http://www.ensembl.org/Docs/Lists/}}}).}
\par 
\par }
